#!/usr/bin/env python3
"""
üé§ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è WebSocket —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è HR-–ü—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏–∫–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Ollama + WebRTC + Browser APIs –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
"""
import asyncio
import websockets
import json
import logging
import base64
import tempfile
import os
from datetime import datetime
import requests
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
OLLAMA_URL = "http://localhost:11434"
OLLAMA_MODEL = "llama2"  # –ò–ª–∏ –¥—Ä—É–≥–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
USE_OLLAMA = True  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç Ollama, fallback –Ω–∞ OpenAI

class FreePhoneServer:
    """–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Å AI"""
    
    def __init__(self):
        self.active_calls = {}
        self.total_calls = 0
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    async def check_ollama_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama"""
        try:
            response = requests.get(f"{OLLAMA_URL}/api/tags", timeout=5)
            if response.status_code == 200:
                models = response.json().get('models', [])
                available_models = [m['name'] for m in models]
                logger.info(f"‚úÖ Ollama –ø–æ–¥–∫–ª—é—á–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {available_models}")
                return True, available_models
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False, []
    
    async def generate_ai_response(self, user_input: str, user_id: str = "unknown") -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Ollama –∏–ª–∏ OpenAI"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Ollama
            if USE_OLLAMA:
                ollama_available, models = await self.check_ollama_connection()
                if ollama_available and OLLAMA_MODEL in [m.split(':')[0] for m in models]:
                    return await self.ollama_response(user_input)
            
            # Fallback –Ω–∞ OpenAI
            if OPENAI_API_KEY and OPENAI_API_KEY != "dummy_key_for_testing":
                return await self.openai_response(user_input)
            
            # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π AI
            return await self.local_ai_response(user_input)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –æ—Ç–≤–µ—Ç–∞: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
    
    async def ollama_response(self, user_input: str) -> str:
        """–û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Ollama"""
        try:
            # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è HR-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
            system_prompt = """–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π HR-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∏ –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ –∏–º–µ–Ω–∏ –ê–Ω–Ω–∞. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ—á—å –ª—é–¥—è–º —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–º —Ä–∞–∑–≤–∏—Ç–∏–µ–º.
–ò—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–æ–¥–∏–∫–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–ú–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞ —Ä–∞–∑."""
            
            full_prompt = f"{system_prompt}\n\n–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {user_input}\n\n–û—Ç–≤–µ—Ç:"
            
            data = {
                "model": OLLAMA_MODEL,
                "prompt": full_prompt,
                "stream": False,
                "options": {
                    "temperature": 0.7,
                    "top_p": 0.9,
                    "max_tokens": 150
                }
            }
            
            response = requests.post(
                f"{OLLAMA_URL}/api/generate",
                json=data,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                ai_text = result.get('response', '').strip()
                logger.info(f"‚úÖ Ollama –æ—Ç–≤–µ—Ç: {ai_text[:50]}...")
                return ai_text if ai_text else await self.local_ai_response(user_input)
            else:
                logger.error(f"Ollama –æ—à–∏–±–∫–∞: {response.status_code}")
                return await self.local_ai_response(user_input)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Ollama: {e}")
            return await self.local_ai_response(user_input)
    
    async def openai_response(self, user_input: str) -> str:
        """–û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenAI API"""
        try:
            import openai
            openai.api_key = OPENAI_API_KEY
            
            response = await openai.ChatCompletion.acreate(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã HR-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ê–Ω–Ω–∞. –ü–æ–º–æ–≥–∞–µ—à—å —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ."},
                    {"role": "user", "content": user_input}
                ],
                max_tokens=150,
                temperature=0.7
            )
            
            ai_text = response.choices[0].message.content.strip()
            logger.info(f"‚úÖ OpenAI –æ—Ç–≤–µ—Ç: {ai_text[:50]}...")
            return ai_text
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
            return await self.local_ai_response(user_input)
    
    async def local_ai_response(self, user_input: str) -> str:
        """–õ–æ–∫–∞–ª—å–Ω—ã–π AI –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        input_lower = user_input.lower()
        
        # HR-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        if any(word in input_lower for word in ['–ø—Ä–æ—Ñ–µ—Å—Å–∏—è', '—Ä–∞–±–æ—Ç–∞', '–∫–∞—Ä—å–µ—Ä–∞', '—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å']):
            return "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ –∫–∞—Ä—å–µ—Ä–µ! –ö–∞–∫–∞—è —Å—Ñ–µ—Ä–∞ –≤–∞—Å –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: IT, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, –º–µ–¥–∏—Ü–∏–Ω–∞ –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ?"
            
        elif any(word in input_lower for word in ['it', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∞–π—Ç–∏', '–∫–æ–º–ø—å—é—Ç–µ—Ä—ã']):
            return "IT-—Å—Ñ–µ—Ä–∞ –æ—á–µ–Ω—å –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–∞! –ï—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞. –ß—Ç–æ –≤–∞–º –±–ª–∏–∂–µ?"
            
        elif any(word in input_lower for word in ['–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '—Ä–µ–∫–ª–∞–º–∞', '–ø—Ä–æ–¥–∞–∂–∏']):
            return "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ —Ç—Ä–µ–±—É–µ—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏. –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –∫—Ä–µ–∞—Ç–∏–≤ –∏–ª–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞?"
            
        elif any(word in input_lower for word in ['–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', '–∞–Ω–∞–ª–∏–∑', '—Ç–µ—Å—Ç']):
            return "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ - –º–æ—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è! –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–π—Ç–∏ –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤ –Ω–∞—à–µ–º Telegram-–±–æ—Ç–µ."
            
        elif any(word in input_lower for word in ['–∑–∞—Ä–ø–ª–∞—Ç–∞', '–¥–µ–Ω—å–≥–∏', '–¥–æ—Ö–æ–¥']):
            return "–í—ã—Å–æ–∫–∏–µ –¥–æ—Ö–æ–¥—ã –≤ IT, —Ñ–∏–Ω–∞–Ω—Å–∞—Ö, –º–µ–¥–∏—Ü–∏–Ω–µ. –ù–æ –≥–ª–∞–≤–Ω–æ–µ - –Ω–∞–π—Ç–∏ –¥–µ–ª–æ –ø–æ –¥—É—à–µ. –ß—Ç–æ –≤–∞—Å —É–≤–ª–µ–∫–∞–µ—Ç?"
            
        elif any(word in input_lower for word in ['—Å–º–µ–Ω–∏—Ç—å', '–ø–æ–º–µ–Ω—è—Ç—å']):
            return "–°–º–µ–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –≤–æ–∑–º–æ–∂–Ω–∞! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤ —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—Ç–µ?"
            
        elif any(word in input_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ']):
            return "–ü—Ä–∏–≤–µ—Ç! –Ø –ê–Ω–Ω–∞, –≤–∞—à AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∫–∞—Ä—å–µ—Ä–µ. –ü–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é!"
            
        elif any(word in input_lower for word in ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é']):
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à Telegram-–±–æ—Ç. –£–¥–∞—á–∏ –≤ –∫–∞—Ä—å–µ—Ä–µ!"
            
        else:
            return "–ü–æ–Ω–∏–º–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –∏ —Ü–µ–ª—è—Ö –≤ –∫–∞—Ä—å–µ—Ä–µ?"

    async def handle_client(self, websocket, path):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞"""
        client_id = f"client_{self.total_calls}"
        self.total_calls += 1
        
        logger.info(f"üìû –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {client_id} ({websocket.remote_address})")
        
        self.active_calls[client_id] = {
            "websocket": websocket,
            "start_time": datetime.now(),
            "status": "connected",
            "messages": []
        }
        
        try:
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_msg = {
                "type": "ai_response",
                "text": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HR –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞, –≤–∞—à AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∫–∞—Ä—å–µ—Ä–µ. –ö–∞–∫ –¥–µ–ª–∞? –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏?",
                "timestamp": datetime.now().isoformat()
            }
            await websocket.send(json.dumps(welcome_msg))
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            async for message in websocket:
                try:
                    data = json.loads(message)
                    await self.process_message(client_id, data)
                except json.JSONDecodeError:
                    logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç {client_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {client_id}: {e}")
                    
        except websockets.exceptions.ConnectionClosed:
            logger.info(f"üîö –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: {client_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è {client_id}: {e}")
        finally:
            # –û—á–∏—Å—Ç–∫–∞
            if client_id in self.active_calls:
                del self.active_calls[client_id]
    
    async def process_message(self, client_id: str, data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        message_type = data.get("type", "")
        websocket = self.active_calls[client_id]["websocket"]
        
        if message_type == "audio_data":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ (—Å–∏–º—É–ª—è—Ü–∏—è STT)
            audio_data = data.get("audio", "")
            recognized_text = await self.simulate_speech_recognition(audio_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            stt_response = {
                "type": "speech_recognized",
                "text": recognized_text,
                "timestamp": datetime.now().isoformat()
            }
            await websocket.send(json.dumps(stt_response))
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI –æ—Ç–≤–µ—Ç
            ai_response = await self.generate_ai_response(recognized_text, client_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AI –æ—Ç–≤–µ—Ç
            ai_msg = {
                "type": "ai_response", 
                "text": ai_response,
                "timestamp": datetime.now().isoformat()
            }
            await websocket.send(json.dumps(ai_msg))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏
            self.active_calls[client_id]["messages"].extend([
                {"role": "user", "text": recognized_text},
                {"role": "ai", "text": ai_response}
            ])
            
        elif message_type == "text_message":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            user_text = data.get("text", "")
            ai_response = await self.generate_ai_response(user_text, client_id)
            
            response = {
                "type": "ai_response",
                "text": ai_response,
                "timestamp": datetime.now().isoformat()
            }
            await websocket.send(json.dumps(response))
            
        elif message_type == "ping":
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            pong = {
                "type": "pong",
                "timestamp": datetime.now().isoformat()
            }
            await websocket.send(json.dumps(pong))
    
    async def simulate_speech_recognition(self, audio_data: str) -> str:
        """–°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ (–≤ –±—É–¥—É—â–µ–º - —Ä–µ–∞–ª—å–Ω—ã–π STT)"""
        # –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã –∞—É–¥–∏–æ
        audio_length = len(audio_data) if audio_data else 0
        
        professional_phrases = [
            "–•–æ—á—É –æ–±—Å—É–¥–∏—Ç—å –≤—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏",
            "–ü–æ–º–æ–≥–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –∫–∞—Ä—å–µ—Ä–æ–π",
            "–ö–∞–∫–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –≤ IT –ø–æ–ø—É–ª—è—Ä–Ω—ã", 
            "–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ä–∞–±–æ—Ç–∞ –≤ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ",
            "–•–æ—á—É —Å–º–µ–Ω–∏—Ç—å —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
            "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –º–æ–∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π"
        ]
        
        casual_phrases = [
            "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
            "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å –¥–µ–ª–∞—Ç—å?",
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å"
        ]
        
        import random
        if audio_length > 1000:  # "–î–ª–∏–Ω–Ω—ã–µ" —Å–æ–æ–±—â–µ–Ω–∏—è
            return random.choice(professional_phrases)
        else:
            return random.choice(casual_phrases)

async def main():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    server = FreePhoneServer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Ollama –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await server.check_ollama_connection()
    
    logger.info("üé§ –ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ ws://localhost:8765")
    logger.info("üåê –û—Ç–∫—Ä–æ–π—Ç–µ browser_phone.html –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è Railway)
    port = int(os.getenv("PORT", 8765))
    host = "0.0.0.0" if os.getenv("RAILWAY_ENVIRONMENT") else "localhost"
    
    start_server = websockets.serve(
        server.handle_client, 
        host, 
        port,
        ping_interval=20,
        ping_timeout=10
    )
    
    await start_server
    logger.info("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
    
    # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–Ω—ã–º
    await asyncio.Future()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
