from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import requests
import json

app = FastAPI(title="AI Autoresponder", version="1.0.0")

class ChatMessage(BaseModel):
    message: str
    caller_id: str = "unknown"

class ChatResponse(BaseModel):
    response: str
    caller_id: str

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama
def check_ollama():
    try:
        response = requests.get("http://localhost:11434/api/tags")
        return response.status_code == 200
    except:
        return False

@app.get("/")
def health_check():
    ollama_status = "online" if check_ollama() else "offline"
    return {
        "status": "AI Autoresponder Running",
        "ollama": ollama_status,
        "model": "tinyllama"
    }

@app.post("/chat", response_model=ChatResponse)
def chat_with_ai(chat: ChatMessage):
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
        prompt = f"""–¢—ã - –≤–µ–∂–ª–∏–≤—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (–º–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
        
–ó–≤–æ–Ω—è—â–∏–π: {chat.message}
–û—Ç–≤–µ—Ç:"""

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ TinyLlama
        response = requests.post("http://localhost:11434/api/generate", 
            json={
                "model": "tinyllama",
                "prompt": prompt,
                "stream": False,
                "options": {
                    "temperature": 0.7,
                    "max_tokens": 100
                }
            },
            timeout=30
        )
        
        if response.status_code == 200:
            ai_response = response.json().get("response", "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω—è–ª –≤–∞—Å")
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
            if len(ai_response) > 200:
                ai_response = ai_response[:200] + "..."
            
            return ChatResponse(
                response=ai_response.strip(),
                caller_id=chat.caller_id
            )
        else:
            raise HTTPException(status_code=500, detail="AI service unavailable")
            
    except requests.exceptions.Timeout:
        raise HTTPException(status_code=408, detail="AI response timeout")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error: {str(e)}")

@app.post("/phone-call")
def handle_phone_call(chat: ChatMessage):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤"""
    try:
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏
        prompt = f"""–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫. 
–ì–æ–≤–æ—Ä–∏ –∫–∞–∫ —Å–µ–∫—Ä–µ—Ç–∞—Ä—å: –≤–µ–∂–ª–∏–≤–æ, –ø–æ –¥–µ–ª—É, –∫—Ä–∞—Ç–∫–æ.

–ó–≤–æ–Ω—è—â–∏–π —Å–∫–∞–∑–∞–ª: "{chat.message}"

–¢–≤–æ–π –æ—Ç–≤–µ—Ç (–º–∞–∫—Å–∏–º—É–º 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):"""

        response = requests.post("http://localhost:11434/api/generate", 
            json={
                "model": "tinyllama",
                "prompt": prompt,
                "stream": False,
                "options": {
                    "temperature": 0.5,  # –ú–µ–Ω–µ–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ
                    "max_tokens": 50     # –ö–æ—Ä–æ—á–µ
                }
            },
            timeout=15
        )
        
        if response.status_code == 200:
            ai_response = response.json().get("response", "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–≤–æ–Ω–æ–∫!")
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–µ–µ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
            ai_response = ai_response.strip()
            if len(ai_response) > 100:
                ai_response = ai_response[:100] + "."
            
            return {
                "response": ai_response,
                "caller_id": chat.caller_id,
                "type": "phone_response"
            }
        else:
            return {
                "response": "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–≤–æ–Ω–æ–∫! –ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ–∑–∂–µ.",
                "caller_id": chat.caller_id,
                "type": "fallback"
            }
            
    except Exception as e:
        return {
            "response": "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–≤–æ–Ω–æ–∫! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è.",
            "caller_id": chat.caller_id,
            "type": "error"
        }

if __name__ == "__main__":
    import uvicorn
    print("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º AI –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫...")
    print("üì± API –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞: http://localhost:8000")
    print("üìã –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
    uvicorn.run(app, host="0.0.0.0", port=8000)
