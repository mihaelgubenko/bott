#!/usr/bin/env python3
"""
WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç real-time –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–≤–æ–Ω–∫–æ–≤ —Å AI
"""
import asyncio
import websockets
import json
import subprocess
import tempfile
import os
import base64
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PhoneAutoresponder:
    def __init__(self):
        self.ollama_path = r'C:\Users\mihae\AppData\Local\Programs\Ollama\ollama.exe'
        self.model = "tinyllama"
        self.active_calls = {}
        
    async def handle_client(self, websocket):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        client_id = f"client_{datetime.now().strftime('%H%M%S')}"
        logger.info(f"üìû –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {client_id}")
        
        try:
            async for message in websocket:
                data = json.loads(message)
                await self.process_message(websocket, client_id, data)
                
        except websockets.exceptions.ConnectionClosed:
            logger.info(f"üì¥ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: {client_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ {client_id}: {e}")
            await self.send_error(websocket, str(e))

    async def process_message(self, websocket, client_id, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        message_type = data.get("type")
        
        if message_type == "call_start":
            await self.handle_call_start(websocket, client_id, data)
        elif message_type == "audio_data":
            await self.handle_audio_data(websocket, client_id, data)
        elif message_type == "text_message":
            await self.handle_text_message(websocket, client_id, data)
        elif message_type == "call_end":
            await self.handle_call_end(websocket, client_id, data)
        else:
            await self.send_error(websocket, f"Unknown message type: {message_type}")

    async def handle_call_start(self, websocket, client_id, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–≤–æ–Ω–∫–∞"""
        caller_id = data.get("caller_id", "Unknown")
        self.active_calls[client_id] = {
            "caller_id": caller_id,
            "start_time": datetime.now(),
            "messages": []
        }
        
        logger.info(f"üìû –ó–≤–æ–Ω–æ–∫ –Ω–∞—á–∞—Ç: {caller_id} -> {client_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        welcome_text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –≥–æ–≤–æ—Ä–∏—Ç–µ —Å AI –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–æ–º. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
        
        response = {
            "type": "ai_response",
            "text": welcome_text,
            "caller_id": caller_id,
            "timestamp": datetime.now().isoformat()
        }
        
        await websocket.send(json.dumps(response))

    async def handle_text_message(self, websocket, client_id, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        user_text = data.get("text", "")
        caller_id = data.get("caller_id", "test")
        
        if not user_text:
            await self.send_error(websocket, "Empty message")
            return
        
        logger.info(f"üí¨ –¢–µ–∫—Å—Ç –æ—Ç {caller_id}: {user_text}")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        if client_id in self.active_calls:
            self.active_calls[client_id]["messages"].append({
                "type": "user",
                "text": user_text,
                "timestamp": datetime.now()
            })
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ AI
        ai_response = await self.process_with_ai(user_text, caller_id)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç AI
        if client_id in self.active_calls:
            self.active_calls[client_id]["messages"].append({
                "type": "ai",
                "text": ai_response,
                "timestamp": datetime.now()
            })
        
        response = {
            "type": "ai_response",
            "text": ai_response,
            "caller_id": caller_id,
            "timestamp": datetime.now().isoformat()
        }
        
        await websocket.send(json.dumps(response))

    async def handle_audio_data(self, websocket, client_id, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ)"""
        # –ü–æ–∫–∞ —á—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ
        audio_base64 = data.get("audio", "")
        caller_id = data.get("caller_id", "unknown")
        
        logger.info(f"üé§ –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ –æ—Ç {caller_id} (—Ä–∞–∑–º–µ—Ä: {len(audio_base64)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
        simulated_text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ —Å–∫–∞–∑–∞–ª"
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
        ai_response = await self.process_with_ai(simulated_text, caller_id)
        
        response = {
            "type": "ai_response", 
            "text": ai_response,
            "caller_id": caller_id,
            "timestamp": datetime.now().isoformat(),
            "note": "Audio processing simulated"
        }
        
        await websocket.send(json.dumps(response))

    async def handle_call_end(self, websocket, client_id, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞"""
        if client_id in self.active_calls:
            call_info = self.active_calls[client_id]
            duration = datetime.now() - call_info["start_time"]
            
            logger.info(f"üì¥ –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: {call_info['caller_id']} (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration})")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—â–∞–Ω–∏–µ
            response = {
                "type": "call_ended",
                "text": "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–≤–æ–Ω–æ–∫! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
                "duration": str(duration),
                "messages_count": len(call_info["messages"])
            }
            
            await websocket.send(json.dumps(response))
            del self.active_calls[client_id]

    async def process_with_ai(self, text, caller_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ TinyLlama"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
            prompt = f"""–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫. 
–ì–æ–≤–æ—Ä–∏ –∫—Ä–∞—Ç–∫–æ, –≤–µ–∂–ª–∏–≤–æ, –ø–æ –¥–µ–ª—É. –ú–∞–∫—Å–∏–º—É–º 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.

–ó–≤–æ–Ω—è—â–∏–π —Å–∫–∞–∑–∞–ª: "{text}"

–¢–≤–æ–π –æ—Ç–≤–µ—Ç:"""

            logger.info(f"ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ AI: {text[:50]}...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º TinyLlama
            result = subprocess.run([
                self.ollama_path, 'run', self.model, prompt
            ], capture_output=True, text=True, timeout=15, encoding='utf-8', errors='ignore')
            
            if result.returncode == 0:
                response = result.stdout.strip()
                
                # –û—á–∏—â–∞–µ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                response = response.replace(prompt, "").strip()
                if len(response) > 150:
                    response = response[:150] + "..."
                
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
                response = " ".join(response.split())
                
                logger.info(f"‚úÖ AI –æ—Ç–≤–µ—Ç: {response}")
                return response if response else "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!"
            else:
                logger.error(f"‚ùå Ollama error: {result.stderr}")
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω—è–ª –≤–∞—Å. –ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?"
                
        except subprocess.TimeoutExpired:
            logger.warning("‚è∞ AI timeout")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –∑–∞–¥–µ—Ä–∂–∫—É. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
        except Exception as e:
            logger.error(f"‚ùå AI error: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

    async def send_error(self, websocket, error_message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –∫–ª–∏–µ–Ω—Ç—É"""
        response = {
            "type": "error",
            "message": error_message,
            "timestamp": datetime.now().isoformat()
        }
        try:
            await websocket.send(json.dumps(response))
        except:
            pass

    def get_stats(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤"""
        return {
            "active_calls": len(self.active_calls),
            "calls": list(self.active_calls.keys())
        }

async def main():
    autoresponder = PhoneAutoresponder()
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫...")
    logger.info("üìû WebSocket —Å–µ—Ä–≤–µ—Ä: ws://localhost:8765")
    logger.info("ü§ñ AI –º–æ–¥–µ–ª—å: TinyLlama")
    
    async with websockets.serve(autoresponder.handle_client, "localhost", 8765):
        logger.info("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω! –ñ–¥–µ–º –∑–≤–æ–Ω–∫–∏...")
        await asyncio.Future()  # –†–∞–±–æ—Ç–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
