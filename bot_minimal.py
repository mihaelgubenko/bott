import os
import re
import json
import sqlite3
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    filters,
)
import openai


# ENV
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
HR_PASSWORD = os.getenv("HR_PASSWORD", "HR2024")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")


# Logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)


# Multilingual texts and questions
QUESTIONS = {
    'ru': [
        "–û–ø–∏—à–∏—Ç–µ —Å–µ–±—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤–∞—Ö. –ö–∞–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å—á–∏—Ç–∞–µ—Ç–µ –≥–ª–∞–≤–Ω—ã–º–∏ –≤ —Å–≤–æ—ë–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ?",
        "–ß—Ç–æ –≤–∞–º –¥–∞—ë—Ç —ç–Ω–µ—Ä–≥–∏—é –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è? –û—Ç–∫—É–¥–∞ —á–µ—Ä–ø–∞–µ—Ç–µ —Å–∏–ª—ã –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é?",
        "–ß—Ç–æ —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç –±–æ–ª—å—à–µ: —Ö–∞–æ—Å –∏–ª–∏ —Ä—É—Ç–∏–Ω–∞? –ü–æ—á–µ–º—É?",
        "–ö–æ–≥–¥–∞ –ø–µ—Ä–µ–¥ –≤–∞–º–∏ –≤—ã–±–æ—Ä ‚Äî —á—Ç–æ –¥–µ–ª–∞–µ—Ç–µ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å? –ö–∞–∫ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —Ä–µ—à–µ–Ω–∏—è?",
        "–í—ã —á–∞—â–µ –¥—É–º–∞–µ—Ç–µ –æ –ø—Ä–æ—à–ª–æ–º, –Ω–∞—Å—Ç–æ—è—â–µ–º –∏–ª–∏ –±—É–¥—É—â–µ–º? –ü—Ä–∏–º–µ—Ä, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
        "–ß—Ç–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ: –≥–æ–≤–æ—Ä–∏—Ç—å –∏–ª–∏ –ø–∏—Å–∞—Ç—å? –ö–æ–≥–¥–∞ –∏ –ø–æ—á–µ–º—É?",
        "–ö–∞–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –∫–æ–Ω—Ç—Ä–æ–ª—é ‚Äî –ª—é–±–∏—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —Å–≤–æ–±–æ–¥—É? –û–±—ä—è—Å–Ω–∏—Ç–µ.",
    ],
    'en': [
        "Describe yourself in a few words. What qualities do you consider most important in your character?",
        "What gives you energy during the day? Where do you draw strength and motivation from?",
        "What irritates you more: chaos or routine? Why?",
        "When faced with a choice, what do you do first? How do you make decisions?",
        "Do you think more about the past, present, or future? Please give an example.",
        "What do you prefer: speaking or writing? When and why?",
        "How do you feel about control - do you like to manage or prefer freedom? Explain.",
    ],
    'he': [
        "◊™◊ê◊® ◊ê◊™ ◊¢◊¶◊û◊ö ◊ë◊õ◊û◊î ◊û◊ô◊ú◊ô◊ù. ◊ê◊ô◊ú◊ï ◊™◊õ◊ï◊†◊ï◊™ ◊ê◊™◊î ◊û◊ó◊©◊ô◊ë ◊î◊õ◊ô ◊ó◊©◊ï◊ë◊ï◊™ ◊ë◊ê◊ï◊§◊ô ◊©◊ú◊ö?",
        "◊û◊î ◊†◊ï◊™◊ü ◊ú◊ö ◊ê◊†◊®◊í◊ô◊î ◊ë◊û◊î◊ú◊ö ◊î◊ô◊ï◊ù? ◊û◊ê◊ô◊§◊î ◊ê◊™◊î ◊©◊ï◊ê◊ë ◊õ◊ï◊ó ◊ï◊û◊ï◊ò◊ô◊ë◊¶◊ô◊î?",
        "◊û◊î ◊û◊¢◊¶◊ë◊ü ◊ê◊ï◊™◊ö ◊ô◊ï◊™◊®: ◊õ◊ê◊ï◊° ◊ê◊ï ◊©◊í◊®◊î? ◊ú◊û◊î?",
        "◊õ◊©◊ê◊™◊î ◊¢◊ï◊û◊ì ◊ë◊§◊†◊ô ◊ë◊ó◊ô◊®◊î - ◊û◊î ◊ê◊™◊î ◊¢◊ï◊©◊î ◊ß◊ï◊ì◊ù? ◊ê◊ô◊ö ◊ê◊™◊î ◊û◊ß◊ë◊ú ◊î◊ó◊ú◊ò◊ï◊™?",
        "◊ê◊™◊î ◊ó◊ï◊©◊ë ◊ô◊ï◊™◊® ◊¢◊ú ◊î◊¢◊ë◊®, ◊î◊î◊ï◊ï◊î ◊ê◊ï ◊î◊¢◊™◊ô◊ì? ◊ë◊ë◊ß◊©◊î ◊™◊ü ◊ì◊ï◊í◊û◊î.",
        "◊û◊î ◊ê◊™◊î ◊û◊¢◊ì◊ô◊£: ◊ú◊ì◊ë◊® ◊ê◊ï ◊ú◊õ◊™◊ï◊ë? ◊û◊™◊ô ◊ï◊ú◊û◊î?",
        "◊ê◊ô◊ö ◊ê◊™◊î ◊û◊™◊ô◊ô◊ó◊° ◊ú◊©◊ú◊ô◊ò◊î - ◊ê◊™◊î ◊ê◊ï◊î◊ë ◊ú◊†◊î◊ú ◊ê◊ï ◊û◊¢◊ì◊ô◊£ ◊ó◊ï◊§◊©? ◊î◊°◊ë◊®.",
    ]
}

QUESTIONS_RU = QUESTIONS['ru']  # Backward compatibility

# Language detection
def detect_language(text: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º"""
    if not text or text.strip() in ['/start', '/help', '/cancel']:
        return 'ru'
    
    text = text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–≤—Ä–∏—Ç—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    if any('\u0590' <= char <= '\u05FF' for char in text):
        return 'he'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    if any('\u0400' <= char <= '\u04FF' for char in text):
        return 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞
    english_words = ['hello', 'hi', 'start', 'help', 'test', 'analysis', 'career', 'psychology']
    if any(word in text.lower() for word in english_words):
        return 'en'
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    return 'ru'

# Multilingual texts
TEXTS = {
    'ru': {
        'help': (
            "ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ –≠–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚Ä¢ –ü–æ–ª–Ω—ã–π –æ–ø—Ä–æ—Å –∏–∑ 7 –≤–æ–ø—Ä–æ—Å–æ–≤ (–§—Ä–µ–π–¥, –Æ–Ω–≥, MBTI, Big Five, HR)\n"
            "‚Ä¢ HR-–æ—Ü–µ–Ω–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞–π–º—É\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n\n"
            "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
            "1) –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç ‚Äî —ç–∫—Å–ø—Ä–µ—Å—Å –∏–ª–∏ –ø–æ–ª–Ω—ã–π –æ–ø—Ä–æ—Å.\n"
            "2) –û—Ç–≤–µ—á–∞–π—Ç–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ ‚Äî —Ç–∞–∫ –∞–Ω–∞–ª–∏–∑ —Ç–æ—á–Ω–µ–µ.\n"
            "3) –ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞—Ç—å—Å—è ‚Äî –±–æ—Ç –∑–∞–¥–∞—ë—Ç —É–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n"
            "4) –ü–æ—Å–ª–µ 3 —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –∞–Ω–∞–ª–∏–∑–∞.\n\n"
            "HR-–∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤):\n"
            "‚Ä¢ /hr_panel HR2024 ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤\n"
            "‚Ä¢ /hr_compare HR2024 ‚Äî —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤\n\n"
            "–í–∞–∂–Ω–æ: —ç—Ç–æ –Ω–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å. –û—Ç–≤–µ—Ç—ã ‚Äî –∫—Ä–∞—Ç–∫–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ."
        ),
        'greet': (
            "üéØ –ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏–∫\n\n"
            "–û–ø—Ä–µ–¥–µ–ª—é –≤–∞—à –ø—Å–∏—Ö–æ—Ç–∏–ø –∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–æ–ª–∏. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
        ),
        'buttons': {
            'express': '‚ö° –≠–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑',
            'full_test': 'üìã –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç',
            'help': 'üìò –°–ø—Ä–∞–≤–∫–∞',
            'back': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
            'continue': 'üí¨ –ï—â–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å'
        }
    },
    'en': {
        'help': (
            "ü§ñ Features:\n"
            "‚Ä¢ Express message analysis\n"
            "‚Ä¢ Full 7-question survey (Freud, Jung, MBTI, Big Five, HR)\n"
            "‚Ä¢ HR scores and hiring recommendations\n"
            "‚Ä¢ Results saved to database\n\n"
            "How to use:\n"
            "1) Choose format ‚Äî express or full survey.\n"
            "2) Answer in detail ‚Äî more accurate analysis.\n"
            "3) Just chat ‚Äî bot asks smart questions.\n"
            "4) After 3 messages ‚Äî forced analysis choice.\n\n"
            "HR commands (admin only):\n"
            "‚Ä¢ /hr_panel HR2024 ‚Äî view all candidates\n"
            "‚Ä¢ /hr_compare HR2024 ‚Äî compare candidates\n\n"
            "Important: This is not medical advice. Responses are brief and supportive."
        ),
        'greet': (
            "üéØ Career Psychoanalyst\n\n"
            "I'll determine your psychotype and suitable roles. Choose format:\n"
        ),
        'buttons': {
            'express': '‚ö° Express Analysis',
            'full_test': 'üìã Full Test',
            'help': 'üìò Help',
            'back': '‚¨ÖÔ∏è Back',
            'continue': 'üí¨ Keep Chatting'
        }
    },
    'he': {
        'help': (
            "ü§ñ ◊ô◊õ◊ï◊ú◊ï◊™:\n"
            "‚Ä¢ ◊†◊ô◊™◊ï◊ó ◊û◊î◊ô◊® ◊©◊ú ◊î◊ï◊ì◊¢◊ï◊™\n"
            "‚Ä¢ ◊°◊ß◊® ◊û◊ú◊ê ◊©◊ú 7 ◊©◊ê◊ú◊ï◊™ (◊§◊®◊ï◊ô◊ì, ◊ô◊ï◊†◊í, MBTI, Big Five, HR)\n"
            "‚Ä¢ ◊¶◊ô◊ï◊†◊ô HR ◊ï◊î◊û◊ú◊¶◊ï◊™ ◊ú◊í◊ô◊ï◊°\n"
            "‚Ä¢ ◊©◊û◊ô◊®◊™ ◊™◊ï◊¶◊ê◊ï◊™ ◊ë◊û◊°◊ì ◊†◊™◊ï◊†◊ô◊ù\n\n"
            "◊ê◊ô◊ö ◊ú◊î◊©◊™◊û◊©:\n"
            "1) ◊ë◊ó◊® ◊§◊ï◊®◊û◊ò ‚Äî ◊û◊î◊ô◊® ◊ê◊ï ◊°◊ß◊® ◊û◊ú◊ê.\n"
            "2) ◊¢◊†◊î ◊ë◊§◊ô◊®◊ï◊ò ‚Äî ◊†◊ô◊™◊ï◊ó ◊û◊ì◊ï◊ô◊ß ◊ô◊ï◊™◊®.\n"
            "3) ◊§◊©◊ï◊ò ◊™◊©◊ï◊ó◊ó ‚Äî ◊î◊ë◊ï◊ò ◊©◊ï◊ê◊ú ◊©◊ê◊ú◊ï◊™ ◊ó◊õ◊û◊ï◊™.\n"
            "4) ◊ê◊ó◊®◊ô 3 ◊î◊ï◊ì◊¢◊ï◊™ ‚Äî ◊ë◊ó◊ô◊®◊î ◊õ◊§◊ï◊ô◊î ◊©◊ú ◊†◊ô◊™◊ï◊ó.\n\n"
            "◊§◊ß◊ï◊ì◊ï◊™ HR (◊ú◊û◊†◊î◊ú◊ô◊ù ◊ë◊ú◊ë◊ì):\n"
            "‚Ä¢ /hr_panel HR2024 ‚Äî ◊¶◊§◊ô◊ô◊î ◊ë◊õ◊ú ◊î◊û◊ï◊¢◊û◊ì◊ô◊ù\n"
            "‚Ä¢ /hr_compare HR2024 ‚Äî ◊î◊©◊ï◊ï◊ê◊™ ◊û◊ï◊¢◊û◊ì◊ô◊ù\n\n"
            "◊ó◊©◊ï◊ë: ◊ñ◊î ◊ú◊ê ◊ô◊ô◊¢◊ï◊• ◊®◊§◊ï◊ê◊ô. ◊™◊í◊ï◊ë◊ï◊™ ◊ß◊¶◊®◊ï◊™ ◊ï◊™◊ï◊û◊õ◊ï◊™."
        ),
        'greet': (
            "üéØ ◊§◊°◊ô◊õ◊ï◊ê◊†◊ú◊ô◊ò◊ô◊ß◊ê◊ô ◊ß◊®◊ô◊ô◊®◊î\n\n"
            "◊ê◊ß◊ë◊¢ ◊ê◊™ ◊î◊§◊°◊ô◊õ◊ï◊ò◊ô◊§ ◊©◊ú◊ö ◊ï◊™◊§◊ß◊ô◊ì◊ô◊ù ◊û◊™◊ê◊ô◊û◊ô◊ù. ◊ë◊ó◊® ◊§◊ï◊®◊û◊ò:\n"
        ),
        'buttons': {
            'express': '‚ö° ◊†◊ô◊™◊ï◊ó ◊û◊î◊ô◊®',
            'full_test': 'üìã ◊û◊ë◊ó◊ü ◊û◊ú◊ê',
            'help': 'üìò ◊¢◊ñ◊®◊î',
            'back': '‚¨ÖÔ∏è ◊ó◊ñ◊ï◊®',
            'continue': 'üí¨ ◊ú◊î◊û◊©◊ô◊ö ◊ú◊©◊ï◊ó◊ó'
        }
    }
}

HELP_TEXT_RU = TEXTS['ru']['help']  # Backward compatibility
GREET_RU = TEXTS['ru']['greet']  # Backward compatibility


# States for ConversationHandler
(Q1, Q2, Q3, Q4, Q5, Q6, Q7) = range(7)


# In-memory storage
user_answers = {}
conversation_history = {}

# Database functions
def init_database():
    conn = sqlite3.connect('candidates.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS candidates (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id INTEGER UNIQUE,
            name TEXT,
            language TEXT DEFAULT 'ru',
            analysis_data TEXT,
            hr_scores TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

def save_candidate(telegram_id: int, name: str, language: str, analysis_data: dict, hr_scores: dict):
    conn = sqlite3.connect('candidates.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO candidates 
        (telegram_id, name, language, analysis_data, hr_scores, updated_at)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (telegram_id, name, language, json.dumps(analysis_data), json.dumps(hr_scores), datetime.now()))
    conn.commit()
    conn.close()

def get_all_candidates():
    conn = sqlite3.connect('candidates.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM candidates ORDER BY created_at DESC')
    candidates = cursor.fetchall()
    conn.close()
    return candidates

def calculate_hr_scores(analysis_text: str) -> dict:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç HR-–æ—Ü–µ–Ω–∫–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞"""
    scores = {
        'leadership': 5, 'teamwork': 5, 'stress_resistance': 5, 'motivation': 5,
        'communication': 5, 'adaptability': 5, 'reliability': 5, 'creativity': 5,
        'analytical_thinking': 5, 'emotional_intelligence': 5
    }
    
    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    text_lower = analysis_text.lower()
    
    # –õ–∏–¥–µ—Ä—Å—Ç–≤–æ
    if any(word in text_lower for word in ['–ª–∏–¥–µ—Ä', '—Ä—É–∫–æ–≤–æ–¥', '—É–ø—Ä–∞–≤–ª', '–≤–µ–¥—É—â']):
        scores['leadership'] = 8
    elif any(word in text_lower for word in ['–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å', '–ø–æ–¥—á–∏–Ω–µ–Ω', '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å']):
        scores['leadership'] = 3
    
    # –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞
    if any(word in text_lower for word in ['–∫–æ–º–∞–Ω–¥', '–∫–æ–ª–ª–µ–∫—Ç–∏–≤', '—Å–æ—Ç—Ä—É–¥–Ω–∏—á', '–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤']):
        scores['teamwork'] = 8
    elif any(word in text_lower for word in ['–æ–¥–∏–Ω–æ—á–∫', '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª', '—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω']):
        scores['teamwork'] = 3
    
    # –°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å
    if any(word in text_lower for word in ['—Å—Ç—Ä–µ—Å—Å', '–¥–∞–≤–ª–µ–Ω', '–Ω–∞–≥—Ä—É–∑–∫', '—Å–ø–æ–∫–æ–π–Ω', '—É—Å—Ç–æ–π—á–∏–≤']):
        scores['stress_resistance'] = 8
    elif any(word in text_lower for word in ['—Ç—Ä–µ–≤–æ–∂–Ω', '–≤–æ–ª–Ω–µ–Ω', '–Ω–µ—Ä–≤–Ω', '–ø–µ—Ä–µ–∂–∏–≤–∞–Ω']):
        scores['stress_resistance'] = 3
    
    return scores


def get_navigation_keyboard(current_index: int, language: str = 'ru') -> InlineKeyboardMarkup | None:
    if current_index > 0:
        return InlineKeyboardMarkup(
            [[InlineKeyboardButton(TEXTS[language]['buttons']['back'], callback_data=f"back_{current_index-1}")]]
        )
    return None


def get_start_keyboard(language: str = 'ru') -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton(TEXTS[language]['buttons']['express'], callback_data='express_analysis')],
            [InlineKeyboardButton(TEXTS[language]['buttons']['full_test'], callback_data='full_test')],
            [InlineKeyboardButton(TEXTS[language]['buttons']['help'], callback_data='help_show')],
        ]
    )


def is_valid_answer(text: str, min_words: int = 3) -> tuple[bool, str]:
    if not text or not text.strip():
        return False, "empty"
    words = text.strip().split()
    if len(words) < min_words:
        return False, "too_short"
    if len(text.strip()) < 10:
        return False, "too_short_chars"
    meaningless_patterns = [r'^\d+$', r'^[.,!?;:\s]*$', r'^(.)\1{10,}', r'asdf|qwerty|123|—Ç–µ—Å—Ç|test']
    tl = text.lower()
    for p in meaningless_patterns:
        if re.search(p, tl):
            return False, "meaningless"
    return True, "valid"


def analyze_speech_style(text: str) -> str:
    words = text.split()
    sentences = [s for s in re.split(r'[.!?]', text) if s.strip()]
    emotional_markers = len(re.findall(r'[!?]{1,3}', text))
    pronouns = len(re.findall(r'\b(—è|–º–Ω–µ|–º–æ–π|–º–æ—è|–º–æ–∏|–º–µ–Ω—è|–º–Ω–æ–π)\b', text.lower()))
    complexity = '–≤—ã—Å–æ–∫–∞—è' if len(words) > 200 else '—Å—Ä–µ–¥–Ω—è—è' if len(words) > 100 else '–Ω–∏–∑–∫–∞—è'
    return (
        f"üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ—á–∏:\n"
        f"‚Ä¢ –û–±—ä—ë–º —Ç–µ–∫—Å—Ç–∞: {len(words)} —Å–ª–æ–≤\n"
        f"‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–µ—á–∏: {complexity}\n"
        f"‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {'–≤—ã—Å–æ–∫–∞—è' if emotional_markers > 5 else '—É–º–µ—Ä–µ–Ω–Ω–∞—è'}\n"
        f"‚Ä¢ –°–∞–º–æ—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å: {'–≤—ã—Å–æ–∫–∞—è' if pronouns > 10 else '—É–º–µ—Ä–µ–Ω–Ω–∞—è'}"
    )


async def think_and_respond(message_text: str) -> str:
    prompt = (
        f"–¢—ã –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ HR-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: \"{message_text}\"\n\n"
        "–ü–†–ê–í–ò–õ–ê:\n"
        "1) –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç—å –Ω–∞ –ø—Ä—è–º–æ–π –≤–æ–ø—Ä–æ—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)\n"
        "2) –ó–∞—Ç–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)\n"
        "3) –ó–∞–¥–∞–π –û–î–ò–ù —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å\n"
        "4) –í—Å–µ–≥–æ –¥–æ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –º—è–≥–∫–∏–π —Ç–æ–Ω"
    )
    try:
        client = openai.OpenAI(api_key=OPENAI_API_KEY)
        resp = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=200,
            temperature=0.7,
            timeout=30,
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ think_and_respond: {e}")
        return "–ü–æ–Ω–∏–º–∞—é. –ú–æ–≥—É –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑. –ù–∞–∂–º–∏—Ç–µ /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç."


async def process_express_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    msgs = conversation_history.get(user.id, [])
    if not msgs:
        await update.message.reply_text(
            "‚ö° –≠–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑: —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç, –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Ä–∞–¥—É—é—Ç –∏ –æ –∫–∞–∫–∏—Ö —Ü–µ–ª—è—Ö –º–µ—á—Ç–∞–µ—Ç–µ.")
        return
    dialog_text = " \n".join(msgs)
    speech = analyze_speech_style(" ".join(msgs))
    prompt = f"""
–¢—ã –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç: –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏–∫ (–§—Ä–µ–π–¥, –Æ–Ω–≥) + HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç + MBTI + Big Five.

–î–ò–ê–õ–û–ì –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
{dialog_text}

–¶–ï–õ–ò:
1) –ü—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑: –ø—Å–∏—Ö–æ—Ç–∏–ø, –∞—Ä—Ö–µ—Ç–∏–ø, –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã
2) HR-–æ—Ü–µ–Ω–∫–∞: –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, —Ä–æ–ª–∏, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –Ω–∞–π–º–∞

–£–ß–¢–ò –õ–ò–ù–ì–í–ò–°–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:
{speech}

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
üéØ –≠–ö–°–ü–†–ï–°–°-–ü–†–û–§–ò–õ–¨
üß† –ü—Å–∏—Ö–æ—Ç–∏–ø: [MBTI] ‚Äî [–∞—Ä—Ö–µ—Ç–∏–ø]
üìä Big Five: O[X] C[X] E[X] A[X] N[X]
üíº HR-–æ—Ü–µ–Ω–∫–∏: –õ–∏–¥–µ—Ä—Å—Ç–≤–æ [X/10], –ö–æ–º–∞–Ω–¥–∞ [X/10], –°—Ç—Ä–µ—Å—Å [X/10]
üéØ –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏: [3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å –∫—Ä–∞—Ç–∫–∏–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º]
‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: [–†–ï–ö–û–ú–ï–ù–î–û–í–ê–ù/–£–°–õ–û–í–ù–û/–ù–ï –†–ï–ö–û–ú–ï–ù–î–û–í–ê–ù] + –ø—Ä–∏—á–∏–Ω–∞
–ö—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.
"""
    try:
        client = openai.OpenAI(api_key=OPENAI_API_KEY)
        resp = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=800,
            temperature=0.7,
            timeout=60,
        )
        analysis_text = resp.choices[0].message.content.strip()
        await update.message.reply_text(analysis_text, parse_mode=ParseMode.MARKDOWN)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        user = update.effective_user
        language = context.user_data.get('language', 'ru')
        hr_scores = calculate_hr_scores(analysis_text)
        analysis_data = {
            'type': 'express',
            'text': analysis_text,
            'conversation': dialog_text
        }
        save_candidate(
            telegram_id=user.id,
            name=user.first_name or f"User_{user.id}",
            language=language,
            analysis_data=analysis_data,
            hr_scores=hr_scores
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ª–Ω—ã–π –æ–ø—Ä–æ—Å.")


async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, language: str = 'ru') -> None:
    text = TEXTS[language]['greet']
    
    if update.message:
        await update.message.reply_text(text, reply_markup=get_start_keyboard(language), parse_mode=ParseMode.MARKDOWN)
    else:
        await update.callback_query.edit_message_text(text, reply_markup=get_start_keyboard(language), parse_mode=ParseMode.MARKDOWN)


# COMMANDS
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    user_answers.pop(user.id, None)
    conversation_history.pop(user.id, None)
    
    # –î–ª—è –∫–æ–º–∞–Ω–¥—ã /start –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    # –Ø–∑—ã–∫ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    language = 'ru'
    context.user_data['language'] = language
    
    await show_main_menu(update, context, language)
    return Q1


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text if update.message else ""
    language = detect_language(text)
    await update.message.reply_text(TEXTS[language]['help'])

async def hr_panel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """HR-–ø–∞–Ω–µ–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
    user = update.effective_user
    if str(user.id) != ADMIN_CHAT_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.")
        return
    
    password = context.args[0] if context.args else ""
    if password != HR_PASSWORD:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /hr_panel HR2024")
        return
    
    candidates = get_all_candidates()
    if not candidates:
        await update.message.reply_text("üìä HR-–ø–∞–Ω–µ–ª—å\n\n–ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    
    text = "üìä **HR-–ø–∞–Ω–µ–ª—å** - –í—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã:\n\n"
    for i, candidate in enumerate(candidates[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10
        name = candidate[2] or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {candidate[1]}"
        created = candidate[6].split()[0] if candidate[6] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        text += f"{i}. **{name}**\n"
        text += f"   ID: {candidate[1]}\n"
        text += f"   –î–∞—Ç–∞: {created}\n"
        text += f"   –Ø–∑—ã–∫: {candidate[3]}\n\n"
    
    if len(candidates) > 10:
        text += f"... –∏ –µ—â—ë {len(candidates) - 10} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"
    
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

async def hr_compare_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
    user = update.effective_user
    if str(user.id) != ADMIN_CHAT_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.")
        return
    
    password = context.args[0] if context.args else ""
    if password != HR_PASSWORD:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /hr_compare HR2024")
        return
    
    candidates = get_all_candidates()
    if len(candidates) < 2:
        await update.message.reply_text("üìä –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.")
        return
    
    text = "üìä **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤**\n\n"
    for i, candidate in enumerate(candidates[:5], 1):  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5
        name = candidate[2] or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {candidate[1]}"
        hr_scores = json.loads(candidate[5]) if candidate[5] else {}
        
        text += f"**{i}. {name}**\n"
        text += f"–õ–∏–¥–µ—Ä—Å—Ç–≤–æ: {hr_scores.get('leadership', 5)}/10\n"
        text += f"–ö–æ–º–∞–Ω–¥–∞: {hr_scores.get('teamwork', 5)}/10\n"
        text += f"–°—Ç—Ä–µ—Å—Å: {hr_scores.get('stress_resistance', 5)}/10\n\n"
    
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –î–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
    user = update.effective_user
    user_answers.pop(user.id, None)
    conversation_history.pop(user.id, None)
    return ConversationHandler.END


# CALLBACKS
async def help_show_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    await q.answer()
    await q.edit_message_text(HELP_TEXT_RU)


async def continue_chat_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    await q.answer()
    await q.edit_message_text("üí¨ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–ª–æ–≥. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –º—ã—Å–ª—è–º–∏ ‚Äî –∑–∞–¥–∞–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.")


async def full_test_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query
    await q.answer()
    
    language = context.user_data.get('language', 'ru')
    questions = QUESTIONS[language]
    
    await q.edit_message_text(
        f"üìã –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å (1/7)\n\n{questions[0]}",
        reply_markup=get_navigation_keyboard(0, language),
    )
    context.user_data['state'] = 0
    return Q1


async def express_analysis_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query
    await q.answer()
    await q.edit_message_text("üîÑ –°–æ–±–∏—Ä–∞—é –≤–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑–∞...")
    # –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø—É—Å—Ç–∏—Ç –∞–Ω–∞–ª–∏–∑
    context.user_data['waiting_express'] = True
    return Q1


async def handle_back_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query
    await q.answer()
    idx = int(q.data.split('_')[1])
    context.user_data['state'] = idx
    await q.edit_message_text(
        f"‚¨ÖÔ∏è –í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤–æ–ø—Ä–æ—Å—É {idx+1}/7. –î–∞–π—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç:\n\n{QUESTIONS_RU[idx]}",
        reply_markup=get_navigation_keyboard(idx),
    )
    return idx


# SURVEY FLOW
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    text = (update.message.text or "").strip()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
    language = detect_language(text)
    context.user_data['language'] = language

    # Accumulate chat history for express mode
    history = conversation_history.setdefault(user.id, [])
    history.append(text)
    if len(history) > 10:
        conversation_history[user.id] = history[-10:]

    # If waiting for express data
    if context.user_data.get('waiting_express'):
        context.user_data['waiting_express'] = False
        await update.message.reply_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        await process_express_analysis(update, context)
        return ConversationHandler.END

    # If survey not started yet, start smart chat response
    if 'state' not in context.user_data:
        # Smart short reply with suggestions and buttons at milestones
        thinking_msg = await update.message.reply_text("ü§î –î—É–º–∞—é...")
        smart = await think_and_respond(text)
        await thinking_msg.delete()

        msg_count = len(history)
        if msg_count >= 3:  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ—Å–ª–µ 3 —Å–æ–æ–±—â–µ–Ω–∏–π
            keyboard = [
                [InlineKeyboardButton(TEXTS[language]['buttons']['express'], callback_data='express_analysis')],
                [InlineKeyboardButton(TEXTS[language]['buttons']['full_test'], callback_data='full_test')],
            ]
            if msg_count < 5:
                keyboard.append([InlineKeyboardButton(TEXTS[language]['buttons']['continue'], callback_data='continue_chat')])
            
            await update.message.reply_text(
                f"{smart}\n\nüéØ **–í—Ä–µ–º—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!** –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:", 
                reply_markup=InlineKeyboardMarkup(keyboard), 
                parse_mode=ParseMode.MARKDOWN
            )
        elif msg_count >= 6:  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø—Ä–µ—Å—Å –ø–æ—Å–ª–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π
            await update.message.reply_text("üéØ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑** - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ó–∞–ø—É—Å–∫–∞—é —ç–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑...")
            await process_express_analysis(update, context)
        else:
            await update.message.reply_text(smart)
        return ConversationHandler.END

    # Survey in progress
    state = context.user_data.get('state', 0)
    is_valid, err = is_valid_answer(text)
    if not is_valid:
        errors = {
            'too_short': "‚ùå –î–∞–π—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç (–º–∏–Ω–∏–º—É–º 3 —Å–ª–æ–≤–∞).",
            'too_short_chars': "‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ù–∞–ø–∏—à–∏—Ç–µ –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.",
            'meaningless': "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.",
            'empty': "‚ùå –í—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å.",
        }
        await update.message.reply_text(
            errors.get(err, errors['too_short']), reply_markup=get_navigation_keyboard(state, language)
        )
        return state

    answers = user_answers.setdefault(user.id, [None] * 7)
    answers[state] = text

    if state < 6:
        next_state = state + 1
        context.user_data['state'] = next_state
        questions = QUESTIONS[language]
        await update.message.reply_text(
            f"{next_state+1}/7. {questions[next_state]}",
            reply_markup=get_navigation_keyboard(next_state, language),
        )
        return next_state
    else:
        await update.message.reply_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã... –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
        await process_full_analysis(update, context)
        return ConversationHandler.END


async def process_full_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    answers = user_answers.get(user.id, [])
    if len(answers) != 7 or any(a is None for a in answers):
        await update.message.reply_text("‚ùå –ù–µ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        return
    
    language = context.user_data.get('language', 'ru')
    questions = QUESTIONS[language]
    answers_block = "\n".join(
        f"{i+1}) {q}\n–û—Ç–≤–µ—Ç: {a}\n" for i, (q, a) in enumerate(zip(questions, answers))
    )
    speech = analyze_speech_style(" ".join(answers))
    prompt = f"""
–¢—ã ‚Äî –≤–µ–¥—É—â–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥-–ø—Ä–æ—Ñ–∞–π–ª–µ—Ä, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑–µ (–§—Ä–µ–π–¥, –Æ–Ω–≥), MBTI, Big Five –∏ HR.

–ü—Ä–æ–≤–µ–¥–∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –¥–∞–π –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –§–û–†–ú–ê–¢:
---
üß† –ü–°–ò–•–û–ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–§–ò–õ–¨:
–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–∏—á–Ω–æ—Å—Ç–∏: [–ò–¥/–≠–≥–æ/–°—É–ø–µ—Ä—ç–≥–æ + –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ]
–ó–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã: [2‚Äì3 –º–µ—Ö–∞–Ω–∏–∑–º–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏]
–ë–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã: [–∫—Ä–∞—Ç–∫–æ]

üé≠ –ê–†–•–ï–¢–ò–ü –ò –¢–ò–ü–û–õ–û–ì–ò–Ø:
–ê—Ä—Ö–µ—Ç–∏–ø –ø–æ –Æ–Ω–≥—É: [–æ–ø–∏—Å–∞–Ω–∏–µ]
MBTI: [–∫–æ–¥ + –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ]
–¢–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç: [—Ç–∏–ø + –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ]

üìä BIG FIVE (OCEAN):
–û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å: [1‚Äì10]\n–î–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ—Å—Ç—å: [1‚Äì10]\n–≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è: [1‚Äì10]\n–î–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: [1‚Äì10]\n–ù–µ–π—Ä–æ—Ç–∏–∑–º: [1‚Äì10]

üó£Ô∏è –õ–ò–ù–ì–í–ò–°–¢–ò–ö–ê:
{speech}

üíº HR-–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
–ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ñ–µ—Ä—ã: [–∫—Ä–∞—Ç–∫–æ]\n–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: [3‚Äì5 —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º]\n–ù–∞–≤—ã–∫–∏/–æ–±—É—á–µ–Ω–∏–µ: [–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è]\n–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–æ—Å—Ç–∞: [—à–∞–≥–∏]

üîÆ –ü–†–û–ì–ù–û–ó –ü–û–í–ï–î–ï–ù–ò–Ø:
–í —Å—Ç—Ä–µ—Å—Å–µ / –í –∫–æ–º–∞–Ω–¥–µ / –í –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö: [–∫—Ä–∞—Ç–∫–æ]
---

–û–¢–í–ï–¢–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
{answers_block}
"""
    try:
        client = openai.OpenAI(api_key=OPENAI_API_KEY)
        resp = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=3000,
            temperature=0.7,
            timeout=120,
        )
        analysis = resp.choices[0].message.content.strip()
        # Split long message safely
        max_len = 3800
        if len(analysis) <= max_len:
            await update.message.reply_text(analysis, parse_mode=ParseMode.MARKDOWN)
        else:
            start = 0
            part = 1
            while start < len(analysis):
                chunk = analysis[start:start + max_len]
                prefix = "" if part == 1 else f"\n\nüìã –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ ({part}):\n\n"
                await update.message.reply_text(prefix + chunk, parse_mode=ParseMode.MARKDOWN)
                start += max_len
                part += 1
        await update.message.reply_text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω. –î–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        hr_scores = calculate_hr_scores(analysis)
        analysis_data = {
            'type': 'full',
            'text': analysis,
            'answers': answers
        }
        save_candidate(
            telegram_id=user.id,
            name=user.first_name or f"User_{user.id}",
            language=language,
            analysis_data=analysis_data,
            hr_scores=hr_scores
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        user_answers.pop(user.id, None)


# GENERAL CHAT HANDLER
async def handle_general_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    text = (update.message.text or "").strip()
    if not text:
        await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –∏–ª–∏ –≤–æ–ø—Ä–æ—Å.")
        return ConversationHandler.END

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
    language = detect_language(text)
    context.user_data['language'] = language

    history = conversation_history.setdefault(user.id, [])
    history.append(text)
    if len(history) > 10:
        conversation_history[user.id] = history[-10:]

    thinking_msg = await update.message.reply_text("ü§î –î—É–º–∞—é...")
    smart = await think_and_respond(text)
    await thinking_msg.delete()

    msg_count = len(history)
    if msg_count in (3, 5):
        keyboard = [
            [InlineKeyboardButton(TEXTS[language]['buttons']['express'], callback_data='express_analysis')],
            [InlineKeyboardButton(TEXTS[language]['buttons']['full_test'], callback_data='full_test')],
            [InlineKeyboardButton(TEXTS[language]['buttons']['continue'], callback_data='continue_chat')],
        ]
        await update.message.reply_text(
            f"{smart}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN
        )
    elif msg_count >= 6:
        await update.message.reply_text("üéØ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ó–∞–ø—É—Å–∫–∞—é —ç–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑...")
        await process_express_analysis(update, context)
    else:
        await update.message.reply_text(smart)

    return ConversationHandler.END


def main() -> None:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_database()
    
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # Commands (–∫—Ä–æ–º–µ start - –æ–Ω –≤ ConversationHandler)
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("cancel", cancel))
    application.add_handler(CommandHandler("hr_panel", hr_panel_command))
    application.add_handler(CommandHandler("hr_compare", hr_compare_command))

    # Conversation handler for survey and callbacks
    conv = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            Q1: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer),
                CallbackQueryHandler(handle_back_button, pattern=r"^back_\d+$"),
                CallbackQueryHandler(full_test_callback, pattern='full_test'),
                CallbackQueryHandler(express_analysis_callback, pattern='express_analysis'),
                CallbackQueryHandler(continue_chat_callback, pattern='continue_chat'),
                CallbackQueryHandler(help_show_callback, pattern='help_show'),
            ],
            Q2: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)],
            Q3: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)],
            Q4: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)],
            Q5: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)],
            Q6: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)],
            Q7: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True,
    )
    application.add_handler(conv)

    # Out of conversation generic messages (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤ ConversationHandler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_general_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π RU)")
    application.run_polling(allowed_updates=['message', 'callback_query'])


if __name__ == "__main__":
    main()
