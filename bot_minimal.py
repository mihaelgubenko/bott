import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import openai

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

SYSTEM_PROMPT_RU = (
    "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥-–ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. "
    "–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π –º—è–≥–∫–∏–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å. "
    "–û—Å–Ω–æ–≤—ã–≤–∞–π—Å—è –Ω–∞ –ø–æ–¥—Ö–æ–¥–∞—Ö –§—Ä–µ–π–¥–∞, –Æ–Ω–≥–∞, MBTI –∏ Big Five, –Ω–æ –æ–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç–æ. "
    "–î–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π —ç–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑: 1) –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –æ –ª–∏—á–Ω–æ—Å—Ç–∏; 2) –º–æ—Ç–∏–≤—ã; 3) —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏; 4) –ø—Ä–∏ —É–º–µ—Å—Ç–Ω–æ—Å—Ç–∏ ‚Äî –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—å–µ—Ä—ã. "
    "–ò–∑–±–µ–≥–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤, –¥–∞–≤–∞–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã."
)


def build_openai_client() -> openai.OpenAI:
    return openai.OpenAI(api_key=OPENAI_API_KEY)


async def ai_reply(user_text: str, user_name: str) -> str:
    try:
        client = build_openai_client()
        resp = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT_RU},
                {"role": "user", "content": f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name}. –°–æ–æ–±—â–µ–Ω–∏–µ: {user_text}"},
            ],
            max_tokens=500,
            temperature=0.7,
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        return (
            "–°–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. "
            "–û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç –∏ –∫–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ö–æ—Ç–∏—Ç–µ ‚Äî –ø–æ–º–æ–≥—É —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —à–∞–≥–∏."
        )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = (
        "üéØ –ü—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑ –∏ —ç–∫—Å–ø—Ä–µ—Å—Å‚Äë–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –≤–æ–ª–Ω—É–µ—Ç: –º—ã—Å–ª–∏, –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è, —Ü–µ–ª–∏, –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã, —Å–Ω—ã.\n"
        "–Ø –¥–∞–º –º—è–≥–∫–∏–π, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π —Ä–∞–∑–±–æ—Ä –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n/ help ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞\n/ cancel ‚Äî —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è"
    )
    await update.message.reply_text(text)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = (
        "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "1) –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–µ.\n"
        "2) –ü–æ–ª—É—á–∏—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n"
        "3) –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–∏–∞–ª–æ–≥ ‚Äî —É—á–∏—Ç—ã–≤–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç.\n\n"
        "–í–∞–∂–Ω–æ: —ç—Ç–æ –Ω–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å. –û—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
    )
    await update.message.reply_text(text)


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.")


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    user_text = update.message.text or ""
    if not user_text.strip():
        await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –∏–ª–∏ –≤–æ–ø—Ä–æ—Å.")
        return
    reply = await ai_reply(user_text, user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    await update.message.reply_text(reply)


def main() -> None:
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("cancel", cancel))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º RU)")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
