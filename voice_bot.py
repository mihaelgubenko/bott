#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
–î–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ Railway
"""
import logging
import tempfile
import os
from telegram import Update
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

class SimpleVoiceHandler:
    def __init__(self):
        logger.info("üé§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
        
    async def handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        voice = update.message.voice
        
        logger.info(f"üì¢ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} (ID: {user.id})")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status_msg = await update.message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        try:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            duration = voice.duration if voice.duration else 5
            
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            import random
            
            professional_phrases = [
                "–•–æ—á—É –æ–±—Å—É–¥–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ –∫–∞—Ä—å–µ—Ä—É",
                "–ü–æ–º–æ–≥–∏—Ç–µ —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", 
                "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
                "–ö–∞–∫–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –º–Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç",
                "–ò—â—É —Ä–∞–±–æ—Ç—É –≤ IT —Å—Ñ–µ—Ä–µ",
                "–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ —Ä–µ–∫–ª–∞–º–∞",
                "–•–æ—á—É —Å–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é",
                "–ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –∫–∞—Ä—å–µ—Ä–µ"
            ]
            
            casual_phrases = [
                "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
                "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å –¥–µ–ª–∞—Ç—å?", 
                "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö",
                "–ú–æ–∂–µ—à—å –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–æ–º?",
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å"
            ]
            
            if duration > 10:  # –î–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è = –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ
                recognized_text = random.choice(professional_phrases)
            elif duration > 5:  # –°—Ä–µ–¥–Ω–∏–µ = –≤–æ–ø—Ä–æ—Å—ã
                recognized_text = "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–æ–º —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å –∏ –∫–∞–∫ –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å"
            else:  # –ö–æ—Ä–æ—Ç–∫–∏–µ = –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
                recognized_text = random.choice(casual_phrases)
            
            # AI –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            ai_response = await self.get_ai_consultation(recognized_text, user.first_name, user.id)
            
            # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await status_msg.edit_text(
                f"üé§ **–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:** {recognized_text}\n\n"
                f"ü§ñ **AI –æ—Ç–≤–µ—Ç:** {ai_response}\n\n"
                f"‚è±Ô∏è **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {duration} —Å–µ–∫.\n"
                f"üí° *–≠—Ç–æ —Å–∏–º—É–ª—è—Ü–∏—è - –¥–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ API*"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await status_msg.edit_text(
                "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
                "üé§ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.\n\n"
                "üí° –î–ª—è –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≥–æ–ª–æ—Å–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."
            )
    
    async def generate_simple_response(self, text, user_name):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è HR-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–£–º–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π AI)"""
        text_lower = text.lower()
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è HR-–±–æ—Ç–∞
        if any(word in text_lower for word in ['–ø—Ä–æ—Ñ–µ—Å—Å–∏–∏', '–∫–∞—Ä—å–µ—Ä–∞', '—Ä–∞–±–æ—Ç–∞', '—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å']):
            responses = [
                f"–û—Ç–ª–∏—á–Ω–æ, {user_name}! –í—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ - –≤–∞–∂–Ω–µ–π—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏ —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç–∏. –ö–∞–∫–∞—è —Å—Ñ–µ—Ä–∞ –≤–∞—Å –±–æ–ª—å—à–µ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç: —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è, —Ä–∞–±–æ—Ç–∞ —Å –ª—é–¥—å–º–∏ –∏–ª–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è?",
                f"–ü–æ–Ω–∏–º–∞—é –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ –∫–∞—Ä—å–µ—Ä–µ, {user_name}. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä—ã–Ω–æ–∫ —Ç—Ä—É–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –¥–µ–ª–∞—Ç—å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
                f"–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ –¥—É–º–∞–µ—Ç–µ –æ –∫–∞—Ä—å–µ—Ä–µ! –î–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤–∞–∂–Ω–æ –ø–æ–Ω—è—Ç—å –≤–∞—à –ø—Å–∏—Ö–æ—Ç–∏–ø. –ü—Ä–æ–π–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ /start - —ç—Ç–æ –¥–∞—Å—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã."
            ]
            import random
            return random.choice(responses)
            
        elif any(word in text_lower for word in ['it', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', '–∞–π—Ç–∏', '–∫–æ–º–ø—å—é—Ç–µ—Ä']):
            return f"IT-—Å—Ñ–µ—Ä–∞ –æ—á–µ–Ω—å –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–∞, {user_name}! –ï—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤), –±—ç–∫–µ–Ω–¥ (—Å–µ—Ä–≤–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞), data science (–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö), DevOps (–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞). –ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç - —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ, —á—Ç–æ –≤–∏–¥—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∏–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏?"
            
        elif any(word in text_lower for word in ['–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '—Ä–µ–∫–ª–∞–º–∞', '–ø—Ä–æ–¥–∞–∂–∏', 'smm']):
            return f"–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ - –¥–∏–Ω–∞–º–∏—á–Ω–∞—è —Å—Ñ–µ—Ä–∞! –í–∫–ª—é—á–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫—Ä–µ–∞—Ç–∏–≤–Ω—É—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É, –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–∞–Ω–Ω—ã—Ö, —Ä–∞–±–æ—Ç—É —Å —Å–æ—Ü—Å–µ—Ç—è–º–∏. {user_name}, –≤–∞—Å –±–æ–ª—å—à–µ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è (—Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞) –∏–ª–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è (–∏–∑—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤)?"
            
        elif any(word in text_lower for word in ['—Å–º–µ–Ω–∏—Ç—å', '–ø–æ–º–µ–Ω—è—Ç—å', '–¥—Ä—É–≥—É—é', '–Ω–æ–≤—É—é']):
            return f"–°–º–µ–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –≤ –ª—é–±–æ–º –≤–æ–∑—Ä–∞—Å—Ç–µ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –∏ —á–∞—Å—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —É—Å–ø–µ—Ö—É! {user_name}, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ: —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤ —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—Ç–µ? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Ç–æ, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–æ–π–¥–µ—Ç. –ú–æ–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç—å? –ú–∞–ª–æ –æ–±—â–µ–Ω–∏—è? –ù–∏–∑–∫–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞? –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–≤–∏—Ç–∏—è?"
            
        elif any(word in text_lower for word in ['–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '—É—á–∏—Ç—å—Å—è', '–∫—É—Ä—Å—ã', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç']):
            return f"–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - –æ—Ç–ª–∏—á–Ω–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –±—É–¥—É—â–µ–µ! –°–µ–π—á–∞—Å –º–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã, –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤—ã. {user_name}, –≤–∞–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–º—É —Ç–∏–ø—É –ª–∏—á–Ω–æ—Å—Ç–∏. –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç /start."
            
        elif any(word in text_lower for word in ['–∑–∞—Ä–ø–ª–∞—Ç–∞', '–¥–µ–Ω—å–≥–∏', '–¥–æ—Ö–æ–¥', '–∑–∞—Ä–∞–±–æ—Ç–æ–∫']):
            return f"–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –≤–∞–∂–Ω–∞! –í—ã—Å–æ–∫–æ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–µ —Å—Ñ–µ—Ä—ã: IT (–æ—Ç 100k), —Ñ–∏–Ω–∞–Ω—Å—ã –∏ –±–∞–Ω–∫–∏ (–æ—Ç 80k), –º–µ–¥–∏—Ü–∏–Ω–∞ (–æ—Ç 70k), –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥ (–æ—Ç 90k). –ù–æ –ø–æ–º–Ω–∏—Ç–µ, {user_name} - —Ä–∞–±–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–æ—Å–∏—Ç—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ. –ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç: –≤—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–¥–∞—á–∏?"
            
        elif any(word in text_lower for word in ['—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ', '—Ç–≤–æ—Ä—á–µ—Å–∫', '–¥–∏–∑–∞–π–Ω', '–∏—Å–∫—É—Å—Å—Ç–≤–æ']):
            return f"–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –æ—á–µ–Ω—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã! –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω, UX/UI, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, —Ä–µ–∫–ª–∞–º–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –≤–∏–¥–µ–æ–ø—Ä–æ–¥–∞–∫—à–Ω, –ø–∏—Å–∞—Ç–µ–ª—å—Å—Ç–≤–æ. {user_name}, —á—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç - –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ, —Ä–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞?"
            
        elif any(word in text_lower for word in ['–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', '—Å–æ–≤–µ—Ç', '–ø–æ–º–æ—á—å', '–ø–æ–º–æ—â—å']):
            return f"–ö–æ–Ω–µ—á–Ω–æ –ø–æ–º–æ–≥—É —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π! –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –ª–∏—á–Ω–æ—Å—Ç—å –ø–æ –º–µ—Ç–æ–¥–∏–∫–∞–º –§—Ä–µ–π–¥–∞, –Æ–Ω–≥–∞, MBTI –∏ –¥–∞—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. {user_name}, –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ª—É—á—à–µ –ø—Ä–æ–π—Ç–∏ –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç /start - —ç—Ç–æ –∑–∞–π–º–µ—Ç 5 –º–∏–Ω—É—Ç, –Ω–æ –¥–∞—Å—Ç —Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."
            
        elif any(word in text_lower for word in ['–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', '–∞–Ω–∞–ª–∏–∑', '–ª–∏—á–Ω–æ—Å—Ç–∏', '—Ç–µ—Å—Ç', 'mbti']):
            return "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ - –º–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è! –ò—Å–ø–æ–ª—å–∑—É—é —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏: MBTI –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ª–∏—á–Ω–æ—Å—Ç–∏, Big Five –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞, –º–µ—Ç–æ–¥—ã –§—Ä–µ–π–¥–∞ –∏ –Æ–Ω–≥–∞ –¥–ª—è –≥–ª—É–±–∏–Ω–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –º–æ—Ç–∏–≤–æ–≤. –ù–∞—á–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∫–æ–º–∞–Ω–¥–æ–π /start!"
            
        elif any(word in text_lower for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π']):
            return f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –ê–Ω–Ω–∞ - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π HR-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∏ –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏–∫. –ü–æ–º–æ–≥–∞—é –ª—é–¥—è–º –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏—á–Ω–æ—Å—Ç–∏. –ì–æ—Ç–æ–≤–∞ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –∏ –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ä—å–µ—Ä–µ!"
            
        elif any(word in text_lower for word in ['—É–º–µ–µ—à—å', '–º–æ–∂–µ—à—å', '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', '—Ñ—É–Ω–∫—Ü–∏–∏']):
            return "–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—à–∏—Ä–Ω—ã: –ø—Ä–æ–≤–æ–∂—É –≥–ª—É–±–æ–∫–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏, –æ–ø—Ä–µ–¥–µ–ª—è—é —Ç–∏–ø –ø–æ MBTI, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞, –¥–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º, –ø–æ–º–æ–≥–∞—é —Å –∫–∞—Ä—å–µ—Ä–Ω—ã–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º. –¢–∞–∫–∂–µ —Ç–µ—Å—Ç–∏—Ä—É—é –≥–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞!"
            
        elif any(word in text_lower for word in ['–¥–µ–ª–∞', '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '–∂–∏–∑–Ω—å']):
            return f"–£ –º–µ–Ω—è –æ—Ç–ª–∏—á–Ω–æ! –ü–æ–º–æ–≥–∞—é –ª—é–¥—è–º –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–≤–æ–µ –ø—Ä–∏–∑–≤–∞–Ω–∏–µ –∏ —Å—Ç—Ä–æ–∏—Ç—å —É—Å–ø–µ—à–Ω—É—é –∫–∞—Ä—å–µ—Ä—É. –≠—Ç–æ –æ—á–µ–Ω—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∞—è —Ä–∞–±–æ—Ç–∞! –ê —É –≤–∞—Å –∫–∞–∫ –¥–µ–ª–∞ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π, {user_name}? –î–æ–≤–æ–ª—å–Ω—ã –ª–∏ —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—Ç–æ–π?"
            
        elif any(word in text_lower for word in ['–±—É—Ö–≥–∞–ª—Ç–µ—Ä', '—Ñ–∏–Ω–∞–Ω—Å—ã', '—ç–∫–æ–Ω–æ–º–∏–∫–∞', '–±–∞–Ω–∫']):
            return f"–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ñ–µ—Ä–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –º–Ω–æ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π! –ü–æ–º–∏–º–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏ –µ—Å—Ç—å: —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑, –∞—É–¥–∏—Ç, –Ω–∞–ª–æ–≥–æ–≤–æ–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –±–∞–Ω–∫–æ–≤—Å–∫–æ–µ –¥–µ–ª–æ, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏. {user_name}, —á—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç - —Ä–∞–±–æ—Ç–∞ —Å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å—é –∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤?"
            
        elif len(text) > 80:
            return f"–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞—Å—Å–∫–∞–∑, {user_name}! –í–∏–∂—É, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –∫–∞—Ä—å–µ—Ä—ã –¥–ª—è –≤–∞—Å –≤–∞–∂–µ–Ω. –î–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–π—Ç–∏ –ø–æ–ª–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç - –∫–æ–º–∞–Ω–¥–∞ /start –∑–∞–ø—É—Å—Ç–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å. –≠—Ç–æ –∑–∞–π–º–µ—Ç 5-7 –º–∏–Ω—É—Ç, –Ω–æ –¥–∞—Å—Ç —Ç–æ—á–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã."
            
        else:
            responses = [
                f"–ü–æ–Ω—è–ª –≤–∞—Å, {user_name}! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–æ–º –ª–∏—á–Ω–æ—Å—Ç–∏. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ –∫–∞—Ä—å–µ—Ä–Ω–æ–º –ø–ª–∞–Ω–µ?",
                f"–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π! –ö–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–∞—Ä—å–µ—Ä–µ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏ –≤–∞—Å –≤–æ–ª–Ω—É—é—Ç, {user_name}?",
                f"–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å–∞–º–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º! –ß—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã —É–∑–Ω–∞—Ç—å –æ —Å–≤–æ–∏—Ö –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö?"
            ]
            import random
            return random.choice(responses)

    async def get_ai_consultation(self, user_text: str, user_name: str, user_id: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ AI –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
        try:
            import requests
            import json
            import os
            from datetime import datetime
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç OpenAI –¥–ª—è Railway (–æ–±–ª–∞—á–Ω—ã–π –¥–µ–ø–ª–æ–π)
            railway_env = os.getenv('RAILWAY_ENVIRONMENT')
            if railway_env:
                logger.info("üöÄ Railway —Å—Ä–µ–¥–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI API")
                try:
                    openai_response = await self.get_openai_response(user_text, user_name)
                    if openai_response:
                        return self.format_telegram_response(openai_response)
                except Exception as e:
                    logger.warning(f"OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ Railway: {e}")
            
            # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –ø—Ä–æ–±—É–µ–º Ollama
            try:
                ollama_response = requests.post(
                    "http://localhost:11434/api/generate",
                    json={
                        "model": "tinyllama:latest",
                        "prompt": self.create_hr_prompt(user_text, user_name),
                        "stream": False,
                        "options": {
                            "temperature": 0.7,
                            "num_predict": 100
                        }
                    },
                    timeout=10  # –£–º–µ–Ω—å—à–∏–ª–∏ timeout –¥–ª—è Railway
                )
                
                if ollama_response.status_code == 200:
                    result = ollama_response.json()
                    ai_text = result.get('response', '').strip()
                    if ai_text:
                        logger.info(f"‚úÖ Ollama –æ—Ç–≤–µ—Ç –¥–ª—è {user_name}: {ai_text[:50]}...")
                        return self.format_telegram_response(ai_text)
                        
            except Exception as e:
                logger.warning(f"Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            
            # Fallback –Ω–∞ OpenAI –µ—Å–ª–∏ Ollama –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            try:
                openai_response = await self.get_openai_response(user_text, user_name)
                if openai_response:
                    return self.format_telegram_response(openai_response)
            except Exception as e:
                logger.warning(f"OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π AI
            return await self.generate_simple_response(user_text, user_name)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ AI –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {e}")
            return f"–ü–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å, {user_name}! –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞."

    def create_hr_prompt(self, user_text: str, user_name: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è HR-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        return f"""–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π HR-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∏ –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏–∫ –ê–Ω–Ω–∞.

–ö–û–ù–¢–ï–ö–°–¢: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –±–æ—Ç–µ –¥–ª—è HR-–ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑–∞.

–ó–ê–î–ê–ß–ê: –î–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –∫–∞—Ä—å–µ—Ä–µ –∏ –≤—ã–±–æ—Ä—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏.

–°–¢–ò–õ–¨ –û–¢–í–ï–¢–ê:
- –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω
- 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞–ø—Ä–∞–≤–ª—è–π –Ω–∞ –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç

–í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: "{user_text}"

–û–¢–í–ï–¢:"""

    def format_telegram_response(self, ai_text: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è Telegram"""
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        if len(ai_text) > 300:
            ai_text = ai_text[:297] + "..."
            
        # –î–æ–±–∞–≤–ª—è–µ–º emoji –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        formatted_response = f"ü§ñ **AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç:**\n\n{ai_text}\n\nüí° *–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start*"
        
        return formatted_response

    async def get_openai_response(self, user_text: str, user_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI API"""
        try:
            import os
            import requests
            import json
            
            api_key = os.getenv('OPENAI_API_KEY')
            if not api_key or api_key == "dummy_key_for_testing" or not api_key.startswith('sk-'):
                logger.warning(f"OpenAI API –∫–ª—é—á –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: {api_key[:10] if api_key else 'None'}...")
                return None
                
            headers = {
                'Authorization': f'Bearer {api_key}',
                'Content-Type': 'application/json'
            }
            
            data = {
                "model": "gpt-3.5-turbo",
                "messages": [
                    {
                        "role": "system", 
                        "content": f"–¢—ã HR-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ê–Ω–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –î–∞–π –∫—Ä–∞—Ç–∫—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –∫–∞—Ä—å–µ—Ä–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)."
                    },
                    {
                        "role": "user", 
                        "content": user_text
                    }
                ],
                "max_tokens": 150,
                "temperature": 0.7
            }
            
            response = requests.post(
                'https://api.openai.com/v1/chat/completions',
                headers=headers,
                json=data,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                ai_text = result['choices'][0]['message']['content'].strip()
                logger.info(f"‚úÖ OpenAI –æ—Ç–≤–µ—Ç –¥–ª—è {user_name}: {ai_text[:50]}...")
                return ai_text
            else:
                logger.error(f"OpenAI API –æ—à–∏–±–∫–∞ {response.status_code}: {response.text}")
                return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
            return None

    async def handle_video_note(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä—É–≥–ª—ã—Ö –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        video_note = update.message.video_note
        
        logger.info(f"üé• –í–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} (ID: {user.id})")
        
        duration = video_note.duration if video_note.duration else 0
        
        await update.message.reply_text(
            f"üé• **–ü–æ–ª—É—á–∏–ª –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ!**\n\n"
            f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫.\n"
            f"üë§ –û—Ç: {user.first_name}\n\n"
            f"ü§ñ –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ —è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            f"üì± –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º!\n\n"
            f"üí° *–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö*"
        )

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
voice_handler = SimpleVoiceHandler()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ main.py
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ main.py"""
    await voice_handler.handle_voice_message(update, context)

async def handle_video_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ main.py"""
    await voice_handler.handle_video_note(update, context)

# –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def test_voice_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    
    handler = SimpleVoiceHandler()
    
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
    test_phrases = [
        "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
        "–ß—Ç–æ —É –º–µ–Ω—è —Å –ø–ª–∞–Ω–∞–º–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ",
        "–£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–µ–∫—Ç–æ–º",
        "–î–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –¥–µ—Ç–∞–ª–µ–π –æ —Ç–æ–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –∂–∏–∑–Ω–∏"
    ]
    
    for phrase in test_phrases:
        response = await handler.generate_simple_response(phrase, "–¢–µ—Å—Ç–µ—Ä")
        print(f"üìù '{phrase}' -> '{response}'")
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_voice_system())
