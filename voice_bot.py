#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
–î–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ Railway
"""
import logging
import tempfile
import os
from telegram import Update
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

class SimpleVoiceHandler:
    def __init__(self):
        logger.info("üé§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
        
    async def handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        voice = update.message.voice
        
        logger.info(f"üì¢ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} (ID: {user.id})")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status_msg = await update.message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        try:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            duration = voice.duration if voice.duration else 5
            
            # –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if duration < 3:
                recognized_text = "–ü—Ä–∏–≤–µ—Ç!"
            elif duration < 7:
                recognized_text = "–ö–∞–∫ –¥–µ–ª–∞? –ß—Ç–æ —É —Ç–µ–±—è –Ω–æ–≤–æ–≥–æ?"
            elif duration < 15:
                recognized_text = "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–≤–æ–∏—Ö –ø–ª–∞–Ω–∞—Ö –∏ —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç"
            else:
                recognized_text = "–≠—Ç–æ –±—ã–ª–æ –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –¥–µ—Ç–∞–ª–µ–π –∏ –≤–æ–ø—Ä–æ—Å–æ–≤"
            
            # –ü—Ä–æ—Å—Ç–æ–π AI –æ—Ç–≤–µ—Ç
            ai_response = await self.generate_simple_response(recognized_text, user.first_name)
            
            # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await status_msg.edit_text(
                f"üé§ **–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:** {recognized_text}\n\n"
                f"ü§ñ **AI –æ—Ç–≤–µ—Ç:** {ai_response}\n\n"
                f"‚è±Ô∏è **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {duration} —Å–µ–∫.\n"
                f"üí° *–≠—Ç–æ —Å–∏–º—É–ª—è—Ü–∏—è - –¥–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ API*"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await status_msg.edit_text(
                "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
                "üé§ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.\n\n"
                "üí° –î–ª—è –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≥–æ–ª–æ—Å–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."
            )
    
    async def generate_simple_response(self, text, user_name):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤"""
        text_lower = text.lower()
        
        if any(word in text_lower for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi']):
            return f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –†–∞–¥ –≤–∞—Å —Å–ª—ã—à–∞—Ç—å! –ö–∞–∫ –¥–µ–ª–∞?"
        elif any(word in text_lower for word in ['–¥–µ–ª–∞', 'how are you']):
            return "–£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! –†–∞–±–æ—Ç–∞—é –∫–∞–∫ AI –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫. –ê —É –≤–∞—Å –∫–∞–∫ –¥–µ–ª–∞?"
        elif any(word in text_lower for word in ['–ø–ª–∞–Ω—ã', 'plans', '—á—Ç–æ –¥–µ–ª–∞—Ç—å']):
            return "–ó–≤—É—á–∏—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–∏—Ö –ø–ª–∞–Ω–∞—Ö."
        elif any(word in text_lower for word in ['–ø—Ä–æ–±–ª–µ–º–∞', '–±–µ—Å–ø–æ–∫–æ–∏—Ç', 'trouble']):
            return "–ü–æ–Ω–∏–º–∞—é –≤–∞—à–µ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤—ã—Å–ª—É—à–∞—Ç—å –∏ –ø–æ–º–æ—á—å."
        elif any(word in text_lower for word in ['—Ä–∞–±–æ—Ç–∞', 'work', 'job']):
            return "–†–∞–±–æ—Ç–∞ –≤–∞–∂–Ω–∞—è —Ç–µ–º–∞! –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ñ–µ—Ä–µ?"
        elif len(text) > 50:
            return "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞—Å—Å–∫–∞–∑! –Ø –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –≤—ã—Å–ª—É—à–∞–ª –∏ –≥–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏."
        else:
            return f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä, {user_name}!"

    async def handle_video_note(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä—É–≥–ª—ã—Ö –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        video_note = update.message.video_note
        
        logger.info(f"üé• –í–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} (ID: {user.id})")
        
        duration = video_note.duration if video_note.duration else 0
        
        await update.message.reply_text(
            f"üé• **–ü–æ–ª—É—á–∏–ª –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ!**\n\n"
            f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫.\n"
            f"üë§ –û—Ç: {user.first_name}\n\n"
            f"ü§ñ –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ —è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            f"üì± –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º!\n\n"
            f"üí° *–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö*"
        )

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
voice_handler = SimpleVoiceHandler()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ main.py
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ main.py"""
    await voice_handler.handle_voice_message(update, context)

async def handle_video_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ main.py"""
    await voice_handler.handle_video_note(update, context)

# –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def test_voice_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    
    handler = SimpleVoiceHandler()
    
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
    test_phrases = [
        "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
        "–ß—Ç–æ —É –º–µ–Ω—è —Å –ø–ª–∞–Ω–∞–º–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ",
        "–£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–µ–∫—Ç–æ–º",
        "–î–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –¥–µ—Ç–∞–ª–µ–π –æ —Ç–æ–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –∂–∏–∑–Ω–∏"
    ]
    
    for phrase in test_phrases:
        response = await handler.generate_simple_response(phrase, "–¢–µ—Å—Ç–µ—Ä")
        print(f"üìù '{phrase}' -> '{response}'")
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_voice_system())
