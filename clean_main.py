#!/usr/bin/env python3
"""
–û—á–∏—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –¥–µ–ø–ª–æ—è
–£–±—Ä–∞–Ω—ã –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
"""
import logging
import os
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, 
    ConversationHandler, CallbackQueryHandler
)
from telegram.constants import ParseMode

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
try:
    from voice_bot import handle_voice, handle_video_note
    VOICE_ENABLED = True
    print("‚úÖ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
except ImportError as e:
    print(f"‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    VOICE_ENABLED = False

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID', '123456789')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

try:
    ADMIN_CHAT_ID = int(ADMIN_CHAT_ID)
except ValueError:
    ADMIN_CHAT_ID = 123456789  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–ø—Ä–æ—Å–∞
(Q1, Q2, Q3) = range(3)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç–≤–µ—Ç–æ–≤
user_data = {}
conversation_history = {}

# –ü—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
QUESTIONS = {
    'ru': [
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ. –ö–∞–∫–∏–µ —É –≤–∞—Å –≥–ª–∞–≤–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞?",
        "–ß—Ç–æ –≤–∞—Å –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –≤ –∂–∏–∑–Ω–∏ –∏ —Ä–∞–±–æ—Ç–µ?",
        "–ö–∞–∫ –≤—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º –∏ —Å–ª–æ–∂–Ω—ã–º–∏ —Å–∏—Ç—É–∞—Ü–∏—è–º–∏?"
    ],
    'en': [
        "Tell me about yourself. What are your main qualities?",
        "What motivates you in life and work?",
        "How do you handle stress and difficult situations?"
    ]
}

GREETINGS = {
    'ru': """ü§ñ **AI –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏**

**–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ üì± Telegram —á–∞—Ç —Å AI
‚Ä¢ üé§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π  
‚Ä¢ üìû –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–º –∑–≤–æ–Ω–∫–∞–º
‚Ä¢ üß† –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –Ω–∞—á–∞—Ç—å
‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /test - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ /chat - –æ–±—ã—á–Ω—ã–π —á–∞—Ç

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ!""",
    
    'en': """ü§ñ **AI Auto-responder for telephony**

**What I can do:**
‚Ä¢ üì± Telegram chat with AI
‚Ä¢ üé§ Voice message processing
‚Ä¢ üìû Phone call preparation  
‚Ä¢ üß† Simple personality analysis

**Commands:**
‚Ä¢ /start - begin
‚Ä¢ /help - help
‚Ä¢ /test - testing
‚Ä¢ /chat - regular chat

Just send me a message or voice note!"""
}

def detect_language(text):
    """–ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞"""
    russian_chars = len([c for c in text.lower() if '–∞' <= c <= '—è'])
    english_chars = len([c for c in text.lower() if 'a' <= c <= 'z'])
    
    return 'ru' if russian_chars > english_chars else 'en'

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    user_lang = 'ru'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    context.user_data['language'] = user_lang
    user_data[user.id] = {'answers': [], 'language': user_lang}
    
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} (ID: {user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
    keyboard = [
        [InlineKeyboardButton("üí¨ –û–±—ã—á–Ω—ã–π —á–∞—Ç", callback_data="chat_mode")],
        [InlineKeyboardButton("üìã –ú–∏–Ω–∏-–æ–ø—Ä–æ—Å", callback_data="survey_mode")],
        [InlineKeyboardButton("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="test_mode")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        GREETINGS[user_lang],
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )
    
    return Q1

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """üìã **–°–ø—Ä–∞–≤–∫–∞ –ø–æ AI –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫—É**

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç —Å AI
‚úÖ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏
‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–º –∑–≤–æ–Ω–∫–∞–º

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞  
‚Ä¢ `/test` - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
‚Ä¢ `/chat` - —Ä–µ–∂–∏–º –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞
‚Ä¢ `/status` - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
2. –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç AI
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π

**–°—Ç–∞—Ç—É—Å:** üü¢ –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Railway"""

    await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /test"""
    user = update.effective_user
    
    test_text = f"""üß™ **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã**

**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.first_name} (ID: {user.id})
**–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}

**–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**
‚úÖ Telegram Bot API - —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π - —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ –ö–æ–º–∞–Ω–¥—ã - —Ä–∞–±–æ—Ç–∞—é—Ç
{"‚úÖ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ - –ø–æ–¥–∫–ª—é—á–µ–Ω—ã" if VOICE_ENABLED else "‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ - –æ—Ç–∫–ª—é—á–µ–Ω—ã"}

**–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ  
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /start, /help
‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –º–∏–Ω–∏-–æ–ø—Ä–æ—Å

**–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**
üìû –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∏–µ–π (Twilio)
üß† –£–ª—É—á—à–µ–Ω–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑
üé§ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""

    await update.message.reply_text(test_text, parse_mode=ParseMode.MARKDOWN)

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /status"""
    total_users = len(user_data)
    
    status_text = f"""üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**
üü¢ Telegram Bot - –æ–Ω–ª–∞–π–Ω
üü¢ Railway –¥–µ–ø–ª–æ–π - –∞–∫—Ç–∏–≤–µ–Ω
{"üü¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ - –¥–æ—Å—Ç—É–ø–Ω—ã" if VOICE_ENABLED else "üü° –ì–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã"}

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–ø–ª–æ—è
üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Railway Cloud

**–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:**
üìû –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏: 60%
üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: 70%  
üß† AI –∞–Ω–∞–ª–∏–∑: 80%
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: 90%

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""

    await update.message.reply_text(status_text, parse_mode=ParseMode.MARKDOWN)

async def chat_mode_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∂–∏–º –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    context.user_data['mode'] = 'chat'
    
    await query.edit_message_text(
        "üí¨ **–†–µ–∂–∏–º —á–∞—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω**\n\n–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ AI –ø–æ–º–æ—â–Ω–∏–∫!\n\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
        parse_mode=ParseMode.MARKDOWN
    )
    
    return ConversationHandler.END

async def survey_mode_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∂–∏–º –º–∏–Ω–∏-–æ–ø—Ä–æ—Å–∞"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    user_lang = context.user_data.get('language', 'ru')
    context.user_data['mode'] = 'survey'
    context.user_data['question_index'] = 0
    
    await query.edit_message_text(
        f"üìã **–ú–∏–Ω–∏-–æ–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞**\n\n–í–æ–ø—Ä–æ—Å 1 –∏–∑ 3:\n\n{QUESTIONS[user_lang][0]}",
        parse_mode=ParseMode.MARKDOWN
    )
    
    return Q1

async def test_mode_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    test_info = """üß™ **–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è**

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ö–æ-—Ç–µ—Å—Ç–∞
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞ STT
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π

**–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Railway
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: <2 —Å–µ–∫—É–Ω–¥
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–æ–ª–æ—Å–∞: –¥–∞ (—Å–∏–º—É–ª—è—Ü–∏—è)

–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é: /start"""

    context.user_data['mode'] = 'test'
    
    await query.edit_message_text(test_info, parse_mode=ParseMode.MARKDOWN)
    
    return ConversationHandler.END

async def handle_survey_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å"""
    user = update.effective_user
    answer = update.message.text
    user_lang = context.user_data.get('language', 'ru')
    question_index = context.user_data.get('question_index', 0)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    if user.id not in user_data:
        user_data[user.id] = {'answers': [], 'language': user_lang}
    
    user_data[user.id]['answers'].append(answer)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    if question_index < len(QUESTIONS[user_lang]) - 1:
        # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        question_index += 1
        context.user_data['question_index'] = question_index
        
        await update.message.reply_text(
            f"üìã –í–æ–ø—Ä–æ—Å {question_index + 1} –∏–∑ {len(QUESTIONS[user_lang])}:\n\n{QUESTIONS[user_lang][question_index]}"
        )
        return Q1
    else:
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
        await update.message.reply_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã...")
        await process_simple_analysis(update, context)
        return ConversationHandler.END

async def process_simple_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤"""
    user = update.effective_user
    answers = user_data.get(user.id, {}).get('answers', [])
    
    if not answers:
        await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    analysis_text = f"""üß† **–≠–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏**

**–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤:**

üìä **–ö—Ä–∞—Ç–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å:**
‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {len(answers)}
‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞: {sum(len(a) for a in answers)} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: {'–ü–æ–¥—Ä–æ–±–Ω—ã–π' if sum(len(a) for a in answers) > 200 else '–õ–∞–∫–æ–Ω–∏—á–Ω—ã–π'}

üéØ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª—é–¥—å–º–∏
‚Ä¢ –•–æ—Ä–æ—à–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞

üìû **–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–º –∑–≤–æ–Ω–∫–∞–º:** –í—ã—Å–æ–∫–∞—è

*–î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é —Å OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π*

–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞."""

    await update.message.reply_text(analysis_text, parse_mode=ParseMode.MARKDOWN)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if user.id != ADMIN_CHAT_ID:
        admin_text = f"üìä –ù–æ–≤—ã–π –æ–ø—Ä–æ—Å –æ—Ç {user.first_name} (ID: {user.id})\n–û—Ç–≤–µ—Ç–æ–≤: {len(answers)}"
        try:
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_text)
        except:
            pass

async def handle_general_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    message_text = update.message.text
    mode = context.user_data.get('mode', 'chat')
    
    logger.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name}: '{message_text}' (—Ä–µ–∂–∏–º: {mode})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    if mode == 'survey':
        return await handle_survey_answer(update, context)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_lang = detect_language(message_text)
    context.user_data['language'] = user_lang
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    if user.id not in conversation_history:
        conversation_history[user.id] = []
    conversation_history[user.id].append(message_text)
    
    # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    text_lower = message_text.lower()
    
    if any(word in text_lower for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi']):
        response = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø AI –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
    elif any(word in text_lower for word in ['–ø–æ–º–æ—â—å', 'help']):
        response = "üÜò –î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help\n–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: /test\n–î–ª—è –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞: /start"
    elif any(word in text_lower for word in ['—Ç–µ—Å—Ç', 'test']):
        response = "üß™ –¢–µ—Å—Ç–∏—Ä—É—é... –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /test –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."
    elif any(word in text_lower for word in ['–≥–æ–ª–æ—Å', 'voice']):
        voice_status = "—Ä–∞–±–æ—Ç–∞—é—Ç" if VOICE_ENABLED else "–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        response = f"üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ {voice_status}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
    elif any(word in text_lower for word in ['—Å–ø–∞—Å–∏–±–æ', 'thanks']):
        response = "üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å. –ï—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã?"
    else:
        msg_count = len(conversation_history[user.id])
        response = f"""üí≠ **–ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:** "{message_text}"

üìä –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ #{msg_count} –æ—Ç –≤–∞—Å
ü§ñ –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —É–º–Ω—ã–π AI –æ—Ç–≤–µ—Ç –æ—Ç TinyLlama

**–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**
‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é  
‚Ä¢ /test - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üé§"""
    
    await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
    user = update.effective_user
    
    await update.message.reply_text(
        "‚ùå –î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã.\n\n–î–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    if user.id in user_data:
        del user_data[user.id]
    
    return ConversationHandler.END

async def setup_bot_commands(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        BotCommand("start", "üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("help", "üìã –°–ø—Ä–∞–≤–∫–∞"),
        BotCommand("test", "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"),
        BotCommand("status", "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"),
        BotCommand("chat", "üí¨ –†–µ–∂–∏–º —á–∞—Ç–∞"),
        BotCommand("cancel", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
    ]
    await application.bot.set_my_commands(commands)
    logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ AI –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏...")
    
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start_command)],
        states={
            Q1: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_survey_answer),
                CallbackQueryHandler(chat_mode_callback, pattern="chat_mode"),
                CallbackQueryHandler(survey_mode_callback, pattern="survey_mode"),
                CallbackQueryHandler(test_mode_callback, pattern="test_mode")
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel_command)],
        allow_reentry=True
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('test', test_command))
    application.add_handler(CommandHandler('status', status_command))
    application.add_handler(CommandHandler('chat', lambda u, c: chat_mode_callback(u, c)))
    
    # –ì–æ–ª–æ—Å–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
    if VOICE_ENABLED:
        application.add_handler(MessageHandler(filters.VOICE, handle_voice))
        application.add_handler(MessageHandler(filters.VIDEO_NOTE, handle_video_note))
        logger.info("‚úÖ –ì–æ–ª–æ—Å–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_general_message))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    async def post_init(app):
        await setup_bot_commands(app)
    
    application.post_init = post_init
    
    logger.info("‚úÖ AI –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üì± –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:", "–≤–∫–ª—é—á–µ–Ω—ã" if VOICE_ENABLED else "–æ—Ç–∫–ª—é—á–µ–Ω—ã")
    print("‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    # –ó–∞–ø—É—Å–∫
    application.run_polling(
        allowed_updates=['message', 'callback_query'],
        drop_pending_updates=True
    )

if __name__ == '__main__':
    main()
