#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
–ë–µ–∑ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""
import logging
import os
import asyncio
from telegram import Update, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from telegram.constants import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

class SimpleBotTest:
    def __init__(self):
        self.message_count = {}
        logger.info("ü§ñ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} (ID: {user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
        welcome_text = f"""ü§ñ **–ü—Ä–∏–≤–µ—Ç, {user.first_name}!**

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π AI –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏.

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ `/help` - —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ `/test` - —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π
‚Ä¢ `/status` - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

**–ß—Ç–æ —è —É–º–µ—é:**
‚úÖ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚úÖ –°—á–∏—Ç–∞—Ç—å –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
‚úÖ –†–∞–±–æ—Ç–∞—Ç—å –Ω–∞ Railway
‚è≥ –°–∫–æ—Ä–æ: –≥–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!"""

        await update.message.reply_text(welcome_text, parse_mode=ParseMode.MARKDOWN)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """üìã **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ `/test` - —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π
‚Ä¢ `/status` - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

**–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
2. –ë–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç –∏ –ø–æ–∫–∞–∂–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π

**–°—Ç–∞—Ç—É—Å:** ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Railway
**–í–µ—Ä—Å–∏—è:** 1.0 (—Ç–µ—Å—Ç–æ–≤–∞—è)"""

        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

    async def test_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /test"""
        user_id = update.effective_user.id
        
        test_results = f"""üß™ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è**

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚úÖ Telegram API - —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π - —Ä–∞–±–æ—Ç–∞–µ—Ç  
‚úÖ –ö–æ–º–∞–Ω–¥—ã - —Ä–∞–±–æ—Ç–∞—é—Ç
‚úÖ Markdown - —Ä–∞–±–æ—Ç–∞–µ—Ç

**–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üìä –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–∞—Å: {self.message_count.get(user_id, 0)}
üïí –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: <1 —Å–µ–∫—É–Ω–¥—ã
üîó –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: Railway Cloud

**–°–ª–µ–¥—É—é—â–∏–µ —Ç–µ—Å—Ç—ã:**
‚è≥ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚è≥ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI
‚è≥ –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏"""

        await update.message.reply_text(test_results, parse_mode=ParseMode.MARKDOWN)

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        total_messages = sum(self.message_count.values())
        
        status_text = f"""üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã**

**–ë–æ—Ç:**
üü¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –û–Ω–ª–∞–π–Ω
üè† –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Railway
üêç Python: 3.11+
üì± Telegram API: –ê–∫—Ç–∏–≤–µ–Ω

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.message_count)}
üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}
‚ö° –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–ø–ª–æ—è

**–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**
‚úÖ Telegram Bot API
‚è≥ AI –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
‚è≥ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
‚è≥ –¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è)"""

        await update.message.reply_text(status_text, parse_mode=ParseMode.MARKDOWN)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        message_text = update.message.text
        user_id = user.id

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        self.message_count[user_id] = self.message_count.get(user_id, 0) + 1
        
        logger.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name}: '{message_text}'")

        # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        if "–ø—Ä–∏–≤–µ—Ç" in message_text.lower():
            response = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –ö–∞–∫ –¥–µ–ª–∞?"
        elif "—Ç–µ—Å—Ç" in message_text.lower():
            response = "üß™ –¢–µ—Å—Ç–∏—Ä—É—é... –í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!"
        elif "—Å–ø–∞—Å–∏–±–æ" in message_text.lower():
            response = "üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –ø–æ–º–æ—á—å!"
        elif "–∫–∞–∫ –¥–µ–ª–∞" in message_text.lower():
            response = "üòä –£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! –†–∞–±–æ—Ç–∞—é –Ω–∞ Railway, –∂–¥—É –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!"
        elif "—á—Ç–æ —É–º–µ–µ—à—å" in message_text.lower():
            response = """ü§ñ **–ß—Ç–æ —è —É–º–µ—é:**

‚úÖ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
‚úÖ –°—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚úÖ –†–∞–±–æ—Ç–∞—Ç—å 24/7 –Ω–∞ Railway
‚è≥ –°–∫–æ—Ä–æ: –≥–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
‚è≥ –°–∫–æ—Ä–æ: AI –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫"""
        else:
            response = f"""üí≠ **–ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:** "{message_text}"

üìä –≠—Ç–æ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #{self.message_count[user_id]}
ü§ñ –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —É–º–Ω—ã–π AI –æ—Ç–≤–µ—Ç!

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã: /help –∏–ª–∏ /test"""

        await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)

    async def setup_bot_commands(self, application):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        commands = [
            BotCommand("start", "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
            BotCommand("help", "üìã –°–ø—Ä–∞–≤–∫–∞ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"), 
            BotCommand("test", "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π"),
            BotCommand("status", "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        ]
        await application.bot.set_my_commands(commands)
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot_instance = SimpleBotTest()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot_instance.start_command))
    application.add_handler(CommandHandler("help", bot_instance.help_command))
    application.add_handler(CommandHandler("test", bot_instance.test_command))
    application.add_handler(CommandHandler("status", bot_instance.status_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot_instance.handle_message))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    async def post_init(app):
        await bot_instance.setup_bot_commands(app)
    
    application.post_init = post_init
    
    logger.info("‚úÖ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üì± –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
    print("‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    # –ó–∞–ø—É—Å–∫
    try:
        application.run_polling(
            allowed_updates=['message'],
            drop_pending_updates=True
        )
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()
