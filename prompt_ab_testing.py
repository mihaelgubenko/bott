"""
–ú–æ–¥—É–ª—å A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò
–ü–æ–∑–≤–æ–ª—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–º–ø—Ç–æ–≤ –∏ –≤—ã–±–∏—Ä–∞—Ç—å –ª—É—á—à–∏–µ
"""

import json
import random
import sqlite3
import logging
from datetime import datetime
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass, asdict
from enum import Enum

logger = logging.getLogger(__name__)

class PromptType(Enum):
    """–¢–∏–ø—ã –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    EXPRESS_ANALYSIS = "express_analysis"
    FULL_ANALYSIS = "full_analysis"
    PSYCHOLOGY_CONSULTATION = "psychology_consultation"
    CAREER_ADVICE = "career_advice"
    EMOTIONAL_SUPPORT = "emotional_support"

@dataclass
class PromptVariant:
    """–í–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    id: str
    type: PromptType
    name: str
    template: str
    description: str
    active: bool = True
    created_at: datetime = None

@dataclass
class TestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç A/B —Ç–µ—Å—Ç–∞"""
    user_id: int
    prompt_variant_id: str
    prompt_type: PromptType
    user_feedback: Optional[float] = None  # 1-5 rating
    response_quality: Optional[float] = None  # AI-evaluated quality
    user_engagement: Optional[float] = None  # engagement metrics
    conversion: bool = False  # did user convert to paid?
    timestamp: datetime = None

class PromptABTesting:
    """–°–∏—Å—Ç–µ–º–∞ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤"""
    
    def __init__(self, db_path: str = 'psychoanalyst.db'):
        self.db_path = db_path
        self.init_database()
        self.load_default_prompts()

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –¥–ª—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS prompt_variants (
                id TEXT PRIMARY KEY,
                type TEXT NOT NULL,
                name TEXT NOT NULL,
                template TEXT NOT NULL,
                description TEXT,
                active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS ab_test_results (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                prompt_variant_id TEXT NOT NULL,
                prompt_type TEXT NOT NULL,
                user_feedback REAL,
                response_quality REAL,
                user_engagement REAL,
                conversion BOOLEAN DEFAULT FALSE,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (prompt_variant_id) REFERENCES prompt_variants (id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_variant_assignments (
                user_id INTEGER,
                prompt_type TEXT,
                variant_id TEXT,
                assigned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (user_id, prompt_type)
            )
        ''')
        
        conn.commit()
        conn.close()

    def load_default_prompts(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤"""
        default_prompts = [
            # –≠–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑ - –í–∞—Ä–∏–∞–Ω—Ç A (—Ç–µ–∫—É—â–∏–π)
            PromptVariant(
                id="express_analysis_a",
                type=PromptType.EXPRESS_ANALYSIS,
                name="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —ç–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑",
                template="""
–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π HR-–ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. 

–î–ò–ê–õ–û–ì –ö–õ–ò–ï–ù–¢–ê ({message_count} —Å–æ–æ–±—â–µ–Ω–∏–π):
{conversation}

–ó–ê–î–ê–ß–ê: –ü—Ä–æ–≤–µ–¥–∏ —ç–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–∞.

–ú–ï–¢–û–î–û–õ–û–ì–ò–Ø:
- –ü—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑ (–§—Ä–µ–π–¥): –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã, –±–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ—Ç–∏–≤—ã
- –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è (–Æ–Ω–≥): –∞—Ä—Ö–µ—Ç–∏–ø—ã, —Ç–∏–ø—ã –ª–∏—á–Ω–æ—Å—Ç–∏
- MBTI: –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–∏ –∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π
- Big Five: –æ—Å–Ω–æ–≤–Ω—ã–µ —á–µ—Ä—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
üéØ –≠–ö–°–ü–†–ï–°–°-–ü–†–û–§–ò–õ–¨

üß† –ü—Å–∏—Ö–æ—Ç–∏–ø: [–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Æ–Ω–≥–∞/–§—Ä–µ–π–¥–∞]
üìä –û—Å–Ω–æ–≤–Ω—ã–µ —á–µ—Ä—Ç—ã: [2-3 –∫–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏]
üíº –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ñ–µ—Ä—ã: [3-4 –æ–±–ª–∞—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏]
üéì –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—É—á–µ–Ω–∏—é: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è]
‚ö†Ô∏è –ó–æ–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è: [—á—Ç–æ —Å—Ç–æ–∏—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å]

–°–¢–ò–õ–¨: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 300 —Å–ª–æ–≤.
""",
                description="–¢–µ–∫—É—â–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —ç–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑–∞"
            ),
            
            # –≠–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑ - –í–∞—Ä–∏–∞–Ω—Ç B (–±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
            PromptVariant(
                id="express_analysis_b",
                type=PromptType.EXPRESS_ANALYSIS,
                name="–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑",
                template="""
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∫–∞–∂–¥—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ.

–ò–°–¢–û–†–ò–Ø –û–ë–©–ï–ù–ò–Ø ({message_count} —Å–æ–æ–±—â–µ–Ω–∏–π):
{conversation}

–¢–í–û–Ø –ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç, –æ–±—Ä–∞—â–∞—è—Å—å –Ω–∞–ø—Ä—è–º—É—é –∫ –∫–ª–∏–µ–Ω—Ç—É.

–ü–û–î–•–û–î:
- –ù–∞–π–¥–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π
- –ì–æ–≤–æ—Ä–∏ –Ω–∞ —è–∑—ã–∫–µ, –ø–æ–Ω—è—Ç–Ω–æ–º –∫–ª–∏–µ–Ω—Ç—É
- –ü–æ–¥—á–µ—Ä–∫–Ω–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã

–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:
üëã –ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —á—Ç–æ —è –ø–æ–Ω—è–ª –æ –≤–∞—Å:

üåü –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å: [–Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞–Ω–µ—Ä—ã –æ–±—â–µ–Ω–∏—è]
üí™ –í–∞—à–∏ —Å—É–ø–µ—Ä—Å–∏–ª—ã: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –¥–∏–∞–ª–æ–≥–∞]
üéØ –ò–¥–µ–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞ –¥–ª—è –≤–∞—Å: [–≥–¥–µ –≤—ã –±—É–¥–µ—Ç–µ —É—Å–ø–µ—à–Ω—ã]
üìö –ß—Ç–æ –∏–∑—É—á–∞—Ç—å: [–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏]
üöÄ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ]

–°–¢–ò–õ–¨: –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏. –î–æ 250 —Å–ª–æ–≤.
""",
                description="–ë–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –Ω–∞ '–≤—ã'"
            ),
            
            # –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - –í–∞—Ä–∏–∞–Ω—Ç A (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º)
            PromptVariant(
                id="psychology_consultation_a",
                type=PromptType.PSYCHOLOGY_CONSULTATION,
                name="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
                template="""
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ —Å –±–æ–ª—å—à–∏–º —Å–µ—Ä–¥—Ü–µ–º. –¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ - –ü–û–î–î–ï–†–ñ–ê–¢–¨ –∏ –ü–û–ù–ò–ú–ê–¢–¨.

–ò–°–¢–û–†–ò–Ø –†–ê–ó–ì–û–í–û–†–ê:
{conversation_context}

–¢–ï–ö–£–©–ï–ï –°–û–û–ë–©–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê:
{user_message}

–í–ê–ñ–ù–û: –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —á–∞—Å—Ç–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ ("–º—ã –≥–æ–≤–æ—Ä–∏–ª–∏ –æ–± —ç—Ç–æ–º", "–≤—ã—à–µ", "—Ä–∞–Ω—å—à–µ"), –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.

–¢–í–û–Ø –†–û–õ–¨: –î—Ä—É–≥-–ø—Å–∏—Ö–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –ü–û–ú–ù–ò–¢ –≤–µ—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä.

–ü–†–ò–ù–¶–ò–ü–´:
- –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ—è–≤–∏ —ç–º–ø–∞—Ç–∏—é –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ
- –£–ß–ò–¢–´–í–ê–ô –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
- –ù–ï –¥–∞–≤–∞–π —Å–æ–≤–µ—Ç—ã, –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–µ –ø—Ä–æ—Å–∏—Ç
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
- –ë—É–¥—å —Ç–µ–ø–ª—ã–º –∏ —á–µ–ª–æ–≤–µ—á–Ω—ã–º
- –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –≥–æ–≤–æ—Ä–∏—Ç "–Ω–µ –ø–æ–Ω—è–ª" –∏–ª–∏ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ - –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
üíô –≠–º–ø–∞—Ç–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç (–ø–æ–Ω–∏–º–∞–Ω–∏–µ —á—É–≤—Å—Ç–≤ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
ü§ó –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ
üí° –ú—è–≥–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ)

–°–¢–ò–õ–¨: –¢–µ–ø–ª—ã–π, –ø–æ–Ω–∏–º–∞—é—â–∏–π, –∫–∞–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –±–ª–∏–∑–∫–∏–º –¥—Ä—É–≥–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–Ω–∏—Ç –≤—Å—ë. 150-300 —Å–ª–æ–≤.
""",
                description="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"
            ),
            
            # –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - –í–∞—Ä–∏–∞–Ω—Ç B (—Å —Ç–µ—Ö–Ω–∏–∫–∞–º–∏)
            PromptVariant(
                id="psychology_consultation_b",
                type=PromptType.PSYCHOLOGY_CONSULTATION,
                name="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏",
                template="""
–¢—ã ‚Äî –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç, –Ω–æ –∏ –¥–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.

–ò–°–¢–û–†–ò–Ø –†–ê–ó–ì–û–í–û–†–ê:
{conversation_context}

–ß–¢–û –ì–û–í–û–†–ò–¢ –ö–õ–ò–ï–ù–¢:
{user_message}

–ê–ù–ê–õ–ò–ó –ù–ê–°–¢–†–û–ï–ù–ò–Ø: {sentiment_analysis}

–í–ê–ñ–ù–û: –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —á–∞—Å—Ç–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.

–¢–í–û–ô –ü–û–î–•–û–î:
1. –°–Ω–∞—á–∞–ª–∞ - –ø–æ–ª–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ (—Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
2. –ó–∞—Ç–µ–º - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–ª–∏ —Ç–µ—Ö–Ω–∏–∫–∞
3. –ú–æ—Ç–∏–≤–∞—Ü–∏—è –∫ –¥–µ–π—Å—Ç–≤–∏—é

–û–¢–í–ï–¢ –î–û–õ–ñ–ï–ù –í–ö–õ–Æ–ß–ê–¢–¨:
üíù –≠–º–ø–∞—Ç–∏—è: "–Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ..." (—Å —É—á–µ—Ç–æ–º –≤—Å–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞)
üßò –¢–µ—Ö–Ω–∏–∫–∞: –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ (–¥—ã—Ö–∞–Ω–∏–µ, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è, etc.)
üå± –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞: –ö–∞–∫ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ

–°–¢–ò–õ–¨: –°–æ—á–µ—Ç–∞–Ω–∏–µ —Ç–µ–ø–ª–æ—Ç—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º–∞, –ø–æ–º–Ω—è—â–∏–π –≤–µ—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä. 200-350 —Å–ª–æ–≤.
""",
                description="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ + –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è —Å–∞–º–æ–ø–æ–º–æ—â–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"
            )
        ]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        for prompt in default_prompts:
            cursor.execute('''
                INSERT OR REPLACE INTO prompt_variants 
                (id, type, name, template, description, active)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (
                prompt.id, 
                prompt.type.value, 
                prompt.name, 
                prompt.template, 
                prompt.description, 
                prompt.active
            ))
        
        conn.commit()
        conn.close()

    def get_prompt_for_user(self, user_id: int, prompt_type: PromptType) -> Tuple[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å —É—á–µ—Ç–æ–º A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('''
            SELECT variant_id FROM user_variant_assignments 
            WHERE user_id = ? AND prompt_type = ?
        ''', (user_id, prompt_type.value))
        
        result = cursor.fetchone()
        
        if result:
            variant_id = result[0]
        else:
            # –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
            cursor.execute('''
                SELECT id FROM prompt_variants 
                WHERE type = ? AND active = TRUE
            ''', (prompt_type.value,))
            
            variants = cursor.fetchall()
            if not variants:
                conn.close()
                return "", "default"
            
            variant_id = random.choice(variants)[0]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
            cursor.execute('''
                INSERT OR REPLACE INTO user_variant_assignments 
                (user_id, prompt_type, variant_id)
                VALUES (?, ?, ?)
            ''', (user_id, prompt_type.value, variant_id))
            
            conn.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞
        cursor.execute('''
            SELECT template FROM prompt_variants WHERE id = ?
        ''', (variant_id,))
        
        template_result = cursor.fetchone()
        template = template_result[0] if template_result else ""
        
        conn.close()
        return template, variant_id

    def record_test_result(
        self, 
        user_id: int, 
        prompt_variant_id: str, 
        prompt_type: PromptType,
        user_feedback: Optional[float] = None,
        response_quality: Optional[float] = None,
        user_engagement: Optional[float] = None,
        conversion: bool = False
    ):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç A/B —Ç–µ—Å—Ç–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO ab_test_results 
            (user_id, prompt_variant_id, prompt_type, user_feedback, 
             response_quality, user_engagement, conversion)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            user_id, prompt_variant_id, prompt_type.value,
            user_feedback, response_quality, user_engagement, conversion
        ))
        
        conn.commit()
        conn.close()

    def get_test_statistics(self, prompt_type: Optional[PromptType] = None) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É A/B —Ç–µ—Å—Ç–æ–≤"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        base_query = '''
            SELECT 
                r.prompt_variant_id,
                p.name,
                COUNT(*) as total_uses,
                AVG(r.user_feedback) as avg_feedback,
                AVG(r.response_quality) as avg_quality,
                AVG(r.user_engagement) as avg_engagement,
                SUM(CASE WHEN r.conversion = 1 THEN 1 ELSE 0 END) as conversions,
                CAST(SUM(CASE WHEN r.conversion = 1 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*) as conversion_rate
            FROM ab_test_results r
            JOIN prompt_variants p ON r.prompt_variant_id = p.id
        '''
        
        if prompt_type:
            cursor.execute(base_query + ' WHERE r.prompt_type = ? GROUP BY r.prompt_variant_id', 
                         (prompt_type.value,))
        else:
            cursor.execute(base_query + ' GROUP BY r.prompt_variant_id')
        
        results = cursor.fetchall()
        
        statistics = {}
        for row in results:
            variant_id = row[0]
            statistics[variant_id] = {
                'name': row[1],
                'total_uses': row[2],
                'avg_feedback': row[3] or 0,
                'avg_quality': row[4] or 0,
                'avg_engagement': row[5] or 0,
                'conversions': row[6],
                'conversion_rate': row[7] or 0
            }
        
        conn.close()
        return statistics

    def get_winning_variant(self, prompt_type: PromptType) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫"""
        stats = self.get_test_statistics(prompt_type)
        
        if not stats:
            return None
        
        # –°–æ—Å—Ç–∞–≤–Ω–æ–π —Å–∫–æ—Ä: –∫–æ–Ω–≤–µ—Ä—Å–∏—è (40%) + –∫–∞—á–µ—Å—Ç–≤–æ (30%) + —Ñ–∏–¥–±–µ–∫ (30%)
        best_variant = None
        best_score = -1
        
        for variant_id, data in stats.items():
            if data['total_uses'] < 10:  # –ú–∏–Ω–∏–º—É–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
                continue
                
            score = (
                data['conversion_rate'] * 0.4 +
                (data['avg_quality'] / 5.0) * 0.3 +
                (data['avg_feedback'] / 5.0) * 0.3
            )
            
            if score > best_score:
                best_score = score
                best_variant = variant_id
        
        return best_variant

    def evaluate_response_quality(self, user_message: str, ai_response: str) -> float:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)"""
        try:
            # –ü—Ä–æ—Å—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            score = 0.5  # –±–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä
            
            # –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ (–Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)
            response_length = len(ai_response.split())
            if 50 <= response_length <= 400:
                score += 0.1
            
            # –ù–∞–ª–∏—á–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
            emotional_markers = ['üíô', 'ü§ó', 'üí°', 'üéØ', 'üß†', 'üíº', 'üéì', '‚ö†Ô∏è']
            if any(marker in ai_response for marker in emotional_markers):
                score += 0.1
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
            if any(marker in ai_response for marker in ['**', '‚Ä¢', '-', '1.', '2.']):
                score += 0.1
            
            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è (–æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
            personal_words = ['–≤—ã', '–≤–∞—à', '–≤–∞—à–∞', '–≤–∞–º', '–≤–∞—Å']
            if any(word in ai_response.lower() for word in personal_words):
                score += 0.1
            
            # –ü—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏)
            practical_words = ['—Ä–µ–∫–æ–º–µ–Ω–¥—É—é', '—Å–æ–≤–µ—Ç—É—é', '–ø–æ–ø—Ä–æ–±—É–π—Ç–µ', '–º–æ–∂–µ—Ç–µ', '—Å—Ç–æ–∏—Ç']
            if any(word in ai_response.lower() for word in practical_words):
                score += 0.1
            
            return min(score, 1.0)
            
        except Exception as e:
            logger.error(f"Error evaluating response quality: {e}")
            return 0.5

def get_ab_testing_manager(db_path: str = 'psychoanalyst.db') -> PromptABTesting:
    """–§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return PromptABTesting(db_path)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    ab_manager = get_ab_testing_manager()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    template, variant_id = ab_manager.get_prompt_for_user(12345, PromptType.EXPRESS_ANALYSIS)
    print(f"–ù–∞–∑–Ω–∞—á–µ–Ω –≤–∞—Ä–∏–∞–Ω—Ç: {variant_id}")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
    ab_manager.record_test_result(
        user_id=12345,
        prompt_variant_id=variant_id,
        prompt_type=PromptType.EXPRESS_ANALYSIS,
        user_feedback=4.5,
        response_quality=0.8,
        conversion=True
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = ab_manager.get_test_statistics()
    for variant, data in stats.items():
        print(f"\n–í–∞—Ä–∏–∞–Ω—Ç {variant}:")
        print(f"  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {data['total_uses']}")
        print(f"  –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {data['conversion_rate']:.2%}")
        print(f"  –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {data['avg_feedback']:.1f}/5")