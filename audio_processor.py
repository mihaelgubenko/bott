#!/usr/bin/env python3
"""
–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
–í–∫–ª—é—á–∞–µ—Ç Speech-to-Text –∏ Text-to-Speech
"""
import subprocess
import tempfile
import os
import base64
import logging
from pathlib import Path

logger = logging.getLogger(__name__)

class AudioProcessor:
    def __init__(self):
        # –ü—É—Ç–∏ –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º (–ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏)
        self.espeak_available = self.check_espeak()
        
    def check_espeak(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å espeak –¥–ª—è TTS"""
        try:
            result = subprocess.run(['espeak', '--version'], 
                                  capture_output=True, text=True, timeout=5)
            return result.returncode == 0
        except:
            return False
    
    async def speech_to_text(self, audio_data_base64):
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç
        –ü–æ–∫–∞ —á—Ç–æ —Å–∏–º—É–ª—è—Ü–∏—è - –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å Whisper.cpp
        """
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –∞—É–¥–∏–æ
            audio_bytes = base64.b64decode(audio_data_base64)
            
            # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
            logger.info(f"üé§ –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ: {len(audio_bytes)} –±–∞–π—Ç")
            
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç Whisper.cpp –∏–ª–∏ –¥—Ä—É–≥–æ–π STT
            simulated_texts = [
                "–ê–ª–ª–æ, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!",
                "–ú–æ–∂–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º?",
                "–ö–∞–∫–æ–π —É –≤–∞—Å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã?",
                "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç –≤–∞—à–∏ —É—Å–ª—É–≥–∏?",
                "–°–ø–∞—Å–∏–±–æ, –¥–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
            ]
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ –∞—É–¥–∏–æ
            text_index = len(audio_bytes) % len(simulated_texts)
            recognized_text = simulated_texts[text_index]
            
            logger.info(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {recognized_text}")
            return recognized_text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ STT: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω—è–ª –≤–∞—Å"
    
    async def text_to_speech(self, text):
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å
        """
        try:
            if not self.espeak_available:
                # –ï—Å–ª–∏ espeak –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                logger.warning("‚ö†Ô∏è espeak –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–µ –∞—É–¥–∏–æ")
                return self.create_silence_audio()
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ
            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as tmp_file:
                tmp_audio_path = tmp_file.name
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º espeak –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
            cmd = [
                'espeak',
                '-s', '150',  # —Å–∫–æ—Ä–æ—Å—Ç—å
                '-v', 'ru',   # —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å
                '-w', tmp_audio_path,  # –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
                text
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0 and os.path.exists(tmp_audio_path):
                # –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
                with open(tmp_audio_path, "rb") as f:
                    audio_data = f.read()
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(tmp_audio_path)
                
                # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
                audio_base64 = base64.b64encode(audio_data).decode()
                
                logger.info(f"üîä TTS —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(audio_data)} –±–∞–π—Ç")
                return audio_base64
            else:
                logger.error(f"‚ùå espeak error: {result.stderr}")
                return self.create_silence_audio()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ TTS: {e}")
            return self.create_silence_audio()
    
    def create_silence_audio(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç–∏—à–∏–Ω—ã –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É"""
        # –ü—Ä–æ—Å—Ç–æ–π WAV –∑–∞–≥–æ–ª–æ–≤–æ–∫ + —Ç–∏—à–∏–Ω–∞ (44 –±–∞–π—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ + 1000 –±–∞–π—Ç —Ç–∏—à–∏–Ω—ã)
        wav_header = b'RIFF$\x00\x00\x00WAVEfmt \x10\x00\x00\x00\x01\x00\x01\x00D\xac\x00\x00\x88X\x01\x00\x02\x00\x10\x00data\x00\x00\x00\x00'
        silence_data = b'\x00' * 1000
        audio_data = wav_header + silence_data
        return base64.b64encode(audio_data).decode()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
audio_processor = AudioProcessor()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
async def process_audio_to_text(audio_base64):
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è STT"""
    return await audio_processor.speech_to_text(audio_base64)

async def process_text_to_audio(text):
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è TTS"""
    return await audio_processor.text_to_speech(text)

def get_audio_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö"""
    return {
        "espeak_available": audio_processor.espeak_available,
        "stt_engine": "simulated",
        "tts_engine": "espeak" if audio_processor.espeak_available else "simulated"
    }
