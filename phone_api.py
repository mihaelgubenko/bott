#!/usr/bin/env python3
"""
API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ —á–µ—Ä–µ–∑ Twilio
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å HR-–ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏–∫–æ–º
"""
import asyncio
import logging
import os
import json
from datetime import datetime
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import Response
import uvicorn
from pydantic import BaseModel
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="HR-–ü—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏–∫ Phone API", version="1.0")

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class CallRequest(BaseModel):
    From: str
    To: str
    CallSid: str
    Body: str = ""

class SMSRequest(BaseModel):
    From: str
    Body: str
    MessageSid: str

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
active_calls = {}

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return {
        "service": "HR-–ü—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏–∫ Phone API",
        "status": "running",
        "features": [
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤",
            "SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", 
            "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑–æ–º",
            "TwiML –æ—Ç–≤–µ—Ç—ã"
        ],
        "endpoints": {
            "POST /webhook/call": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤",
            "POST /webhook/sms": "–û–±—Ä–∞–±–æ—Ç–∫–∞ SMS",
            "GET /status": "–°—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–æ–≤"
        }
    }

@app.post("/webhook/call")
async def handle_incoming_call(request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –æ—Ç Twilio"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Twilio
        form_data = await request.form()
        caller_number = form_data.get("From", "Unknown")
        call_sid = form_data.get("CallSid", "")
        
        logger.info(f"üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç {caller_number} (CallSid: {call_sid})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ
        active_calls[call_sid] = {
            "from": caller_number,
            "start_time": datetime.now(),
            "status": "active"
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TwiML –æ—Ç–≤–µ—Ç –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
        twiml_response = f"""<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <Say voice="alice" language="ru-RU">
        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HR –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä! 
        –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞, —è –≤–∞—à AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∫–∞—Ä—å–µ—Ä–µ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É.
        –ö–∞–∫ –¥–µ–ª–∞? –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏?
    </Say>
    <Gather action="/webhook/gather" method="POST" input="speech" speechTimeout="3" timeout="10">
        <Say voice="alice" language="ru-RU">
            –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Ü–µ–ª—è—Ö –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è—Ö.
        </Say>
    </Gather>
    <Say voice="alice" language="ru-RU">
        –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª–∞. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!
    </Say>
    <Hangup/>
</Response>"""
        
        return Response(content=twiml_response, media_type="application/xml")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–∞: {e}")
        # –ë–∞–∑–æ–≤—ã–π TwiML –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        error_twiml = """<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <Say voice="alice" language="ru-RU">
        –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ–∑–∂–µ.
    </Say>
    <Hangup/>
</Response>"""
        return Response(content=error_twiml, media_type="application/xml")

@app.post("/webhook/gather")
async def handle_speech_input(request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        form_data = await request.form()
        speech_result = form_data.get("SpeechResult", "")
        call_sid = form_data.get("CallSid", "")
        caller = form_data.get("From", "Unknown")
        
        logger.info(f"üé§ –†–µ—á—å –æ—Ç {caller}: '{speech_result}'")
        
        # –ü–æ–ª—É—á–∞–µ–º AI –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—á–∏
        ai_response = await generate_ai_response(speech_result, caller)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞
        if call_sid in active_calls:
            active_calls[call_sid]["last_speech"] = speech_result
            active_calls[call_sid]["ai_response"] = ai_response
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TwiML —Å AI –æ—Ç–≤–µ—Ç–æ–º
        twiml_response = f"""<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <Say voice="alice" language="ru-RU">
        {ai_response}
    </Say>
    <Gather action="/webhook/gather" method="POST" input="speech" speechTimeout="3" timeout="8">
        <Say voice="alice" language="ru-RU">
            –ï—Å—Ç—å –ª–∏ –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–∞—Ä—å–µ—Ä–µ –∏–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º?
        </Say>
    </Gather>
    <Say voice="alice" language="ru-RU">
        –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –±–æ—Ç—É –≤ Telegram. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!
    </Say>
    <Hangup/>
</Response>"""
        
        return Response(content=twiml_response, media_type="application/xml")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—á–∏: {e}")
        error_twiml = """<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <Say voice="alice" language="ru-RU">
        –ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!
    </Say>
    <Hangup/>
</Response>"""
        return Response(content=error_twiml, media_type="application/xml")

@app.post("/webhook/sms")
async def handle_sms(request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö SMS"""
    try:
        form_data = await request.form()
        sms_body = form_data.get("Body", "")
        sender = form_data.get("From", "Unknown")
        
        logger.info(f"üì± SMS –æ—Ç {sender}: '{sms_body}'")
        
        # –ü–æ–ª—É—á–∞–µ–º AI –æ—Ç–≤–µ—Ç
        ai_response = await generate_ai_response(sms_body, sender)
        
        # TwiML –æ—Ç–≤–µ—Ç –¥–ª—è SMS
        twiml_response = f"""<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <Message>{ai_response}</Message>
</Response>"""
        
        return Response(content=twiml_response, media_type="application/xml")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ SMS: {e}")
        return Response(content="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", media_type="text/plain")

async def generate_ai_response(user_input: str, caller_id: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    try:
        input_lower = user_input.lower()
        
        # HR-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        if any(word in input_lower for word in ['–ø—Ä–æ—Ñ–µ—Å—Å–∏—è', '—Ä–∞–±–æ—Ç–∞', '–∫–∞—Ä—å–µ—Ä–∞', '—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å']):
            return "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ –∫–∞—Ä—å–µ—Ä–µ! –î–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º –º–Ω–µ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ —É–∑–Ω–∞—Ç—å –æ –≤–∞—Å. –ö–∞–∫–∞—è —Å—Ñ–µ—Ä–∞ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç: IT, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, –º–µ–¥–∏—Ü–∏–Ω–∞ –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ?"
            
        elif any(word in input_lower for word in ['it', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∫–æ–º–ø—å—é—Ç–µ—Ä—ã', '–∞–π—Ç–∏']):
            return "IT-—Å—Ñ–µ—Ä–∞ –æ—á–µ–Ω—å –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–∞! –ï—Å—Ç—å –º–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –¥–∏–∑–∞–π–Ω. –ß—Ç–æ –≤–∞–º –±–ª–∏–∂–µ - —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏?"
            
        elif any(word in input_lower for word in ['–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '—Ä–µ–∫–ª–∞–º–∞', '–ø—Ä–æ–¥–∞–∂–∏']):
            return "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ —Ç—Ä–µ–±—É–µ—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤. –í–∞—Å –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –∫—Ä–µ–∞—Ç–∏–≤, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏–ª–∏ –ø—Ä—è–º—ã–µ –ø—Ä–æ–¥–∞–∂–∏? –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö."
            
        elif any(word in input_lower for word in ['–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', '–∞–Ω–∞–ª–∏–∑', '—Ç–µ—Å—Ç', '–ª–∏—á–Ω–æ—Å—Ç—å']):
            return "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ - –º–æ—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è! –Ø –∏—Å–ø–æ–ª—å–∑—É—é –º–µ—Ç–æ–¥–∏–∫–∏ –§—Ä–µ–π–¥–∞, –Æ–Ω–≥–∞ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—à Telegram-–±–æ—Ç, –≥–¥–µ –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."
            
        elif any(word in input_lower for word in ['—É—á–∏—Ç—å—Å—è', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–∫—É—Ä—Å—ã']):
            return "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É! –í–∞–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–º—É —Ç–∏–ø—É –ª–∏—á–Ω–æ—Å—Ç–∏. –ö–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–∞–≤–∞–ª–∏—Å—å –≤–∞–º –ª–µ–≥—á–µ –≤—Å–µ–≥–æ –≤ —à–∫–æ–ª–µ –∏–ª–∏ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ?"
            
        elif any(word in input_lower for word in ['–∑–∞—Ä–ø–ª–∞—Ç–∞', '–¥–µ–Ω—å–≥–∏', '–¥–æ—Ö–æ–¥']):
            return "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –≤–∞–∂–Ω–∞, –Ω–æ –Ω–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è. –í—ã—Å–æ–∫–∏–µ –¥–æ—Ö–æ–¥—ã –æ–±—ã—á–Ω–æ –≤ IT, —Ñ–∏–Ω–∞–Ω—Å–∞—Ö, –º–µ–¥–∏—Ü–∏–Ω–µ, –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–µ. –ù–æ –≥–ª–∞–≤–Ω–æ–µ - –Ω–∞–π—Ç–∏ –¥–µ–ª–æ –ø–æ –¥—É—à–µ. –ß—Ç–æ –≤–∞—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–≤–ª–µ–∫–∞–µ—Ç?"
            
        elif any(word in input_lower for word in ['—Å–º–µ–Ω–∏—Ç—å', '–ø–æ–º–µ–Ω—è—Ç—å', '–Ω–æ–≤–∞—è']):
            return "–°–º–µ–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –≤ –ª—é–±–æ–º –≤–æ–∑—Ä–∞—Å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–∞! –í–∞–∂–Ω–æ –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–µ–π—á–∞—Å –∏ –∫ —á–µ–º—É —Å—Ç—Ä–µ–º–∏—Ç–µ—Å—å. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Å–≤–æ–µ–π –∫–∞—Ä—å–µ—Ä–µ?"
            
        elif any(word in input_lower for word in ['–ø–æ–º–æ—â—å', '—Å–æ–≤–µ—Ç', '–Ω–µ –∑–Ω–∞—é']):
            return "–ö–æ–Ω–µ—á–Ω–æ –ø–æ–º–æ–≥—É! –í—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ - –≤–∞–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ: —á—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –¥–µ–ª–∞—Ç—å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è? –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –¥–∞—é—Ç—Å—è –ª–µ–≥–∫–æ?"
            
        elif any(word in input_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–¥–æ–±—Ä—ã–π']):
            return "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞, —è AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∫–∞—Ä—å–µ—Ä–µ. –ü–æ–º–æ–≥–∞—é –ª—é–¥—è–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?"
            
        elif any(word in input_lower for word in ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é']):
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥–∞ –±—ã–ª–∞ –ø–æ–º–æ—á—å. –î–ª—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à Telegram-–±–æ—Ç. –£–¥–∞—á–∏ –≤ –∫–∞—Ä—å–µ—Ä–µ!"
            
        else:
            return f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å–ª–æ–∂–Ω—ã–µ. –ß—Ç–æ–±—ã –¥–∞—Ç—å —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ: –∫–∞–∫–∞—è —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –∏–ª–∏ –±–µ—Å–ø–æ–∫–æ–∏—Ç?"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –æ—Ç–≤–µ—Ç–∞: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –±–æ—Ç—É –≤ Telegram."

@app.get("/status")
async def get_call_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤"""
    return {
        "active_calls": len(active_calls),
        "calls": [
            {
                "call_sid": call_id,
                "from": call_info["from"],
                "duration": str(datetime.now() - call_info["start_time"]),
                "status": call_info["status"]
            }
            for call_id, call_info in active_calls.items()
        ]
    }

@app.post("/test/call")
async def test_call_endpoint(request: CallRequest):
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑ Twilio"""
    response = await generate_ai_response(request.Body, request.From)
    return {
        "caller": request.From,
        "input": request.Body,
        "ai_response": response,
        "status": "test_ok"
    }

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Phone API —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è HR-–ü—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏–∫–∞...")
    print("üìû Endpoints:")
    print("  POST /webhook/call - –í—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏")
    print("  POST /webhook/sms - SMS —Å–æ–æ–±—â–µ–Ω–∏—è") 
    print("  GET /status - –°—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–æ–≤")
    print("  POST /test/call - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    uvicorn.run(
        "phone_api:app",
        host="0.0.0.0",
        port=8000,
        log_level="info",
        reload=False
    )
