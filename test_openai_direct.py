#!/usr/bin/env python3
"""
üß™ –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI API —Å –≤–∞—à–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
"""
import os
import requests
import json
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_openai_chat():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI Chat API"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI API —Å –≤–∞—à–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏...")
    
    api_key = os.getenv('OPENAI_API_KEY')
    
    if not api_key:
        print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return False
        
    if not api_key.startswith('sk-'):
        print(f"‚ùå OpenAI –∫–ª—é—á –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: {api_key[:10]}... (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'sk-')")
        return False
        
    print(f"‚úÖ OpenAI –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:15]}...{api_key[-10:]}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º HR –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
    headers = {
        'Authorization': f'Bearer {api_key}',
        'Content-Type': 'application/json'
    }
    
    data = {
        "model": "gpt-3.5-turbo",
        "messages": [
            {
                "role": "system",
                "content": """–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π HR-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∏ –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏–∫ –ê–Ω–Ω–∞.

–ö–û–ù–¢–ï–ö–°–¢: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –±–æ—Ç–µ –¥–ª—è HR-–ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑–∞.

–ó–ê–î–ê–ß–ê: –î–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –∫–∞—Ä—å–µ—Ä–µ –∏ –≤—ã–±–æ—Ä—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏.

–°–¢–ò–õ–¨ –û–¢–í–ï–¢–ê:
- –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω
- 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞–ø—Ä–∞–≤–ª—è–π –Ω–∞ –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç"""
            },
            {
                "role": "user",
                "content": "–Ø —Ä–∞–±–æ—Ç–∞—é –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–º —É–∂–µ 5 –ª–µ—Ç, –Ω–æ —Ö–æ—á—É —Å–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –Ω–∞ —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–µ. –ß—Ç–æ –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å?"
            }
        ],
        "max_tokens": 200,
        "temperature": 0.7
    }
    
    try:
        print("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI...")
        response = requests.post(
            'https://api.openai.com/v1/chat/completions',
            headers=headers,
            json=data,
            timeout=30
        )
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            ai_text = result['choices'][0]['message']['content'].strip()
            
            print("‚úÖ SUCCESS! OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print("ü§ñ AI –æ—Ç–≤–µ—Ç:")
            print("-" * 50)
            print(ai_text)
            print("-" * 50)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
            if len(ai_text) > 20 and any(word in ai_text.lower() for word in ['—Ç–≤–æ—Ä—á–µ—Å–∫', '–ø—Ä–æ—Ñ–µ—Å—Å–∏—è', '–∫–∞—Ä—å–µ—Ä', '—Ä–µ–∫–æ–º–µ–Ω–¥']):
                print("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞: –û–¢–õ–ò–ß–ù–û–ï (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ HR —Ç–µ–º–∞—Ç–∏–∫–µ)")
            else:
                print("‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞: –°–†–ï–î–ù–ï–ï (–Ω–µ –æ—á–µ–Ω—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ)")
            
            return True
            
        elif response.status_code == 401:
            print("‚ùå –û–®–ò–ë–ö–ê 401: –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
            try:
                error_info = response.json()
                print(f"   –î–µ—Ç–∞–ª–∏: {error_info.get('error', {}).get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            except:
                pass
                
        elif response.status_code == 429:
            print("‚ùå –û–®–ò–ë–ö–ê 429: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
            print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –ò—Å—á–µ—Ä–ø–∞–Ω –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤")
            print("   - –ü—Ä–µ–≤—ã—à–µ–Ω rate limit")
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ https://platform.openai.com/usage")
            
        elif response.status_code == 403:
            print("‚ùå –û–®–ò–ë–ö–ê 403: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            print("   –í–æ–∑–º–æ–∂–Ω–æ, –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ API")
            
        else:
            print(f"‚ùå –û–®–ò–ë–ö–ê {response.status_code}:")
            try:
                error_info = response.json()
                print(f"   {error_info}")
            except:
                print(f"   {response.text}")
                
    except requests.exceptions.Timeout:
        print("‚ùå TIMEOUT: –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª 30 —Å–µ–∫—É–Ω–¥")
        
    except requests.exceptions.ConnectionError:
        print("‚ùå CONNECTION ERROR: –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    return False

def test_token_usage():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤"""
    print("\nüí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤...")
    
    api_key = os.getenv('OPENAI_API_KEY')
    headers = {
        'Authorization': f'Bearer {api_key}',
        'Content-Type': 'application/json'
    }
    
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        response = requests.get(
            'https://api.openai.com/v1/models',
            headers=headers,
            timeout=10
        )
        
        if response.status_code == 200:
            models = response.json()
            available_models = [m['id'] for m in models.get('data', []) if 'gpt' in m['id']]
            print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ GPT –º–æ–¥–µ–ª–∏: {available_models[:3]}...")
            return True
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π")
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    
    return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï OPENAI API –° –í–ê–®–ò–ú–ò –¢–û–ö–ï–ù–ê–ú–ò\n")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    openai_works = test_openai_chat()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if openai_works:
        test_token_usage()
    
    print("\n" + "="*60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("="*60)
    
    if openai_works:
        print("üéâ SUCCESS! OpenAI API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        print("ü§ñ –í–∞—à HR-–±–æ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π AI")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ OpenAI –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π AI –≤ Railway")
        
        print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ Railway")
        print("2. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenAI –≤ –æ–±–ª–∞–∫–µ")
        print("3. –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã")
        
    else:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: OpenAI API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("üîß –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:")
        print("1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ –≤ .env")
        print("2. –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ platform.openai.com/usage")
        print("3. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        print("4. –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π AI –∫–∞–∫ fallback")
    
    return 0 if openai_works else 1

if __name__ == "__main__":
    exit(main())
