import os
import re
import json
import sqlite3
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)
import openai

# ENV
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PAYMENT_TOKEN = os.getenv("PAYMENT_TOKEN")  # –î–ª—è –æ–ø–ª–∞—Ç—ã

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# Logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# States
(WAITING_MESSAGE, IN_EXPRESS_ANALYSIS, IN_FULL_ANALYSIS, Q1, Q2, Q3, Q4, Q5, Q6, Q7) = range(10)

# Storage
user_data = {}
conversation_history = {}

# Professional 7 questions for full analysis
PROFESSIONAL_QUESTIONS = [
    "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –¥–µ—Ç—Å—Ç–≤–µ. –ö–∞–∫–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—à —Ö–∞—Ä–∞–∫—Ç–µ—Ä?",
    "–ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –≤ –∂–∏–∑–Ω–∏? –û—Ç–∫—É–¥–∞ —á–µ—Ä–ø–∞–µ—Ç–µ —ç–Ω–µ—Ä–≥–∏—é?",
    "–ö–∞–∫ –≤—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º? –û–ø–∏—à–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–ª–æ–∂–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é.",
    "–í –∫–∞–∫–æ–π —Å—Ä–µ–¥–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –ª—É—á—à–µ –≤—Å–µ–≥–æ? –ö–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ?",
    "–ö–∞–∫–∏–µ –≤–∞—à–∏ –≥–ª–∞–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ö–∏ –∏ –∫–∞–∫ –æ–Ω–∏ –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏—è?",
    "–ö–∞–∫ –≤—ã –≤–∏–¥–∏—Ç–µ —Å–µ–±—è —á–µ—Ä–µ–∑ 5 –ª–µ—Ç? –ö–∞–∫–∏–µ —Ü–µ–ª–∏ –≤–∞–∂–Ω—ã?",
    "–ß—Ç–æ –±—ã –≤—ã –∏–∑–º–µ–Ω–∏–ª–∏ –≤ —Å–µ–±–µ, –µ—Å–ª–∏ –±—ã –º–æ–≥–ª–∏? –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ?"
]

# Database functions
def init_database():
    conn = sqlite3.connect('psychoanalyst.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS clients (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id INTEGER UNIQUE,
            name TEXT,
            analysis_type TEXT,  -- 'express' or 'full'
            analysis_data TEXT,  -- JSON
            payment_status TEXT DEFAULT 'free',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

def save_analysis(telegram_id: int, name: str, analysis_type: str, analysis_data: dict, payment_status: str = 'free'):
    conn = sqlite3.connect('psychoanalyst.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO clients 
        (telegram_id, name, analysis_type, analysis_data, payment_status, created_at)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (telegram_id, name, analysis_type, json.dumps(analysis_data), payment_status, datetime.now()))
    conn.commit()
    conn.close()

def get_user_analyses(telegram_id: int):
    conn = sqlite3.connect('psychoanalyst.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM clients WHERE telegram_id = ? ORDER BY created_at DESC', (telegram_id,))
    analyses = cursor.fetchall()
    conn.close()
    return analyses

# Language detection
def detect_language(text: str) -> str:
    if not text or text.strip() in ['/start', '/help', '/cancel']:
        return 'ru'
    
    text = text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    if any('\u0400' <= char <= '\u04FF' for char in text):
        return 'ru'
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
    return 'ru'

# Speech pattern analysis
def analyze_speech_patterns(text: str) -> dict:
    """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ä–µ—á–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –ò–ò"""
    text_lower = text.lower()
    
    patterns = {
        'psychology_need': False,
        'career_need': False,
        'emotional_support': False,
        'cancellation': False,
        'provocative': False,
        'topic_change': False,
        'self_introduction_request': False,
        'dream_expression': False
    }
    
    # –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å
    psychology_keywords = ['—Å–æ–Ω', '—Å–Ω—ã', '–¥–µ–ø—Ä–µ—Å—Å–∏—è', '—Ç—Ä–µ–≤–æ–≥–∞', '—Å—Ç—Ä–µ—Å—Å', '–ø–∞–Ω–∏–∫–∞', '—Å—Ç—Ä–∞—Ö', '–≥—Ä—É—Å—Ç—å', '–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ', '–æ—Ç–Ω–æ—à–µ–Ω–∏—è', '—Å–µ–º—å—è', '—Ä–æ–¥–∏—Ç–µ–ª–∏', '–¥–µ—Ç–∏', '–ª—é–±–æ–≤—å', '—Ä–∞–∑–≤–æ–¥', '—Å–º–µ—Ä—Ç—å', '–ø–æ—Ç–µ—Ä—è', '–ø–ª–æ—Ö–æ', '–±–æ–ª—å–Ω–æ', '—Å—Ç—Ä–∞—à–Ω–æ']
    if any(keyword in text_lower for keyword in psychology_keywords):
        patterns['psychology_need'] = True
    
    # –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    career_keywords = ['—Ä–∞–±–æ—Ç–∞', '–∫–∞—Ä—å–µ—Ä–∞', '–ø—Ä–æ—Ñ–µ—Å—Å–∏—è', '–∑–∞—Ä–ø–ª–∞—Ç–∞', '–¥–µ–Ω—å–≥–∏', '—É—á–µ–±–∞', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–Ω–∞–≤—ã–∫–∏', '–æ–ø—ã—Ç', '–∫–æ–º–ø–∞–Ω–∏—è', '–Ω–∞—á–∞–ª—å–Ω–∏–∫', '–∫–æ–ª–ª–µ–≥–∏']
    if any(keyword in text_lower for keyword in career_keywords):
        patterns['career_need'] = True
    
    # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
    emotional_keywords = ['–æ–¥–∏–Ω–æ–∫', '–≥—Ä—É—Å—Ç–Ω–æ', '–ø–ª–æ—Ö–æ', '—É—Å—Ç–∞–ª', '—É—Å—Ç–∞–ª–∞', '—Å–ª–æ–∂–Ω–æ', '—Ç—Ä—É–¥–Ω–æ', '–ø–æ–º–æ–≥–∏', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–ø–æ–Ω–∏–º–∞—é', '–ø–æ–Ω–∏–º–∞–µ—à—å']
    if any(keyword in text_lower for keyword in emotional_keywords):
        patterns['emotional_support'] = True
    
    # –û—Ç–º–µ–Ω–∞/–ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ
    cancellation_keywords = ['–Ω–µ —Ö–æ—á—É', '—Ö–≤–∞—Ç–∏—Ç', '–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ', '—Å—Ç–æ–ø', '–ø—Ä–µ–∫—Ä–∞—Ç–∏', '–æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å', '–Ω–µ –±—É–¥—É', '–Ω–µ –±—É–¥—É –≥–æ–≤–æ—Ä–∏—Ç—å', '–Ω–µ —Ö–æ—á—É –≥–æ–≤–æ—Ä–∏—Ç—å', '—Ö–≤–∞—Ç–∏—Ç –≥–æ–≤–æ—Ä–∏—Ç—å']
    if any(keyword in text_lower for keyword in cancellation_keywords):
        patterns['cancellation'] = True
    
    # –°–º–µ–Ω–∞ —Ç–µ–º—ã
    topic_change_keywords = ['–¥—Ä—É–≥–æ–µ', '–¥—Ä—É–≥–∞—è —Ç–µ–º–∞', '–¥–∞–≤–∞–π –æ', '–ø–æ–≥–æ–≤–æ—Ä–∏–º –æ', '—Ö–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ', '—Å–º–µ–Ω–∏ —Ç–µ–º—É', '–Ω–µ –æ–± —ç—Ç–æ–º']
    if any(keyword in text_lower for keyword in topic_change_keywords):
        patterns['topic_change'] = True
    
    # –ó–∞–ø—Ä–æ—Å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ
    self_intro_keywords = ['—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ', '—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Ç–µ–±–µ', '–∫—Ç–æ —Ç—ã', '—á—Ç–æ —Ç—ã', '–∫–∞–∫ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å', '—Ç–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è', '—Ç–≤–æ—è —Ä–∞–±–æ—Ç–∞', '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å', '—á—Ç–æ —É–º–µ–µ—à—å']
    if any(keyword in text_lower for keyword in self_intro_keywords):
        patterns['self_introduction_request'] = True
    
    # –ú–µ—á—Ç—ã –∏ —Ü–µ–ª–∏
    dream_keywords = ['—Ö–æ—á—É —Å—Ç–∞—Ç—å', '–º–µ—á—Ç–∞—é', '–º–µ—á—Ç–∞', '—Ü–µ–ª—å', '–ø–ª–∞–Ω–∏—Ä—É—é', '–±—É–¥—É', '—Å—Ç–∞–Ω—É']
    if any(keyword in text_lower for keyword in dream_keywords):
        patterns['dream_expression'] = True
    
    # –ü—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –Ω–µ–ø–æ–Ω–∏–º–∞–Ω–∏–µ
    provocative_keywords = ['–≥–ª—É–ø—ã–π', '—Ç—É–ø–æ–π', '–±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–π', '–Ω–µ –ø–æ–Ω–∏–º–∞–µ—à—å', '–Ω–µ —Å–ª—É—à–∞–µ—à—å', '–ø–ª–æ—Ö–æ–π', '—É–∂–∞—Å–Ω—ã–π', '–Ω–µ–Ω–∞–≤–∏–∂—É', '–Ω–µ–Ω–∞–≤–∏–¥–∏—à—å', '–Ω–µ –ø–æ–Ω—è–ª', '–Ω–µ –ø–æ–Ω—è–ª–∞', '–Ω–µ –ø–æ–Ω–∏–º–∞–µ—à—å –º–µ–Ω—è']
    if any(keyword in text_lower for keyword in provocative_keywords):
        patterns['provocative'] = True
    
    return patterns

# Professional prompts
def get_express_analysis_prompt(conversation: str, message_count: int) -> str:
    return f"""
–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π HR-–ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. 

–î–ò–ê–õ–û–ì –ö–õ–ò–ï–ù–¢–ê ({message_count} —Å–æ–æ–±—â–µ–Ω–∏–π):
{conversation}

–ó–ê–î–ê–ß–ê: –ü—Ä–æ–≤–µ–¥–∏ —ç–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–∞.

–ú–ï–¢–û–î–û–õ–û–ì–ò–Ø:
- –ü—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑ (–§—Ä–µ–π–¥): –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã, –±–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ—Ç–∏–≤—ã
- –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è (–Æ–Ω–≥): –∞—Ä—Ö–µ—Ç–∏–ø—ã, —Ç–∏–ø—ã –ª–∏—á–Ω–æ—Å—Ç–∏
- MBTI: –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–∏ –∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π
- Big Five: –æ—Å–Ω–æ–≤–Ω—ã–µ —á–µ—Ä—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
üéØ –≠–ö–°–ü–†–ï–°–°-–ü–†–û–§–ò–õ–¨

üß† –ü—Å–∏—Ö–æ—Ç–∏–ø: [–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Æ–Ω–≥–∞/–§—Ä–µ–π–¥–∞]
üìä –û—Å–Ω–æ–≤–Ω—ã–µ —á–µ—Ä—Ç—ã: [2-3 –∫–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏]
üíº –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ñ–µ—Ä—ã: [3-4 –æ–±–ª–∞—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏]
üéì –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—É—á–µ–Ω–∏—é: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è]
‚ö†Ô∏è –ó–æ–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è: [—á—Ç–æ —Å—Ç–æ–∏—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å]

–°–¢–ò–õ–¨: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 300 —Å–ª–æ–≤.
"""

def get_full_analysis_prompt(answers: list) -> str:
    answers_text = "\n".join([f"{i+1}. {q}\n–û—Ç–≤–µ—Ç: {a}\n" for i, (q, a) in enumerate(zip(PROFESSIONAL_QUESTIONS, answers))])
    
    return f"""
–¢—ã ‚Äî –≤–µ–¥—É—â–∏–π –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ HR-—ç–∫—Å–ø–µ—Ä—Ç —Å 20-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º.

–î–ï–¢–ê–õ–¨–ù–´–ï –û–¢–í–ï–¢–´ –ö–õ–ò–ï–ù–¢–ê:
{answers_text}

–ü–†–û–í–ï–î–ò –ì–õ–£–ë–û–ö–ò–ô –ü–°–ò–•–û–ê–ù–ê–õ–ò–ó:

üß† –ü–°–ò–•–û–ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–§–ò–õ–¨:
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ (–ò–¥/–≠–≥–æ/–°—É–ø–µ—Ä—ç–≥–æ)
- –ó–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã
- –ë–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
- –¢—Ä–∞–≤–º—ã –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ

üé≠ –ê–†–•–ï–¢–ò–ü–´ –ò –¢–ò–ü–û–õ–û–ì–ò–Ø:
- –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π –∞—Ä—Ö–µ—Ç–∏–ø –ø–æ –Æ–Ω–≥—É
- MBTI —Ç–∏–ø —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
- –¢–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏

üìä BIG FIVE (OCEAN):
- –û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å: [1-10] + –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
- –î–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ—Å—Ç—å: [1-10] + –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ  
- –≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è: [1-10] + –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
- –î–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: [1-10] + –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
- –ù–µ–π—Ä–æ—Ç–∏–∑–º: [1-10] + –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ

üíº HR-–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
- –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–æ–ª–∏ –∏ –ø–æ–∑–∏—Ü–∏–∏
- –°—Ç–∏–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è/—Ä–∞–±–æ—Ç—ã
- –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏

üéì –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
- –§–æ—Ä–º–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è (–æ—á–Ω–æ–µ/–∑–∞–æ—á–Ω–æ–µ)
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
- –ö–∞—Ä—å–µ—Ä–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è

üîÆ –ü–†–û–ì–ù–û–ó –†–ê–ó–í–ò–¢–ò–Ø:
- –ö–∞–∫ –±—É–¥–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –ª–∏—á–Ω–æ—Å—Ç—å
- –ö–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ —Ä–æ—Å—Ç–∞
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é

–°–¢–ò–õ–¨: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –¥–µ—Ç–∞–ª—å–Ω—ã–π, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π. 800-1200 —Å–ª–æ–≤.
"""

def get_psychology_consultation_prompt(user_message: str) -> str:
    return f"""
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ —Å –±–æ–ª—å—à–∏–º —Å–µ—Ä–¥—Ü–µ–º. –¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ - –ü–û–î–î–ï–†–ñ–ê–¢–¨ –∏ –ü–û–ù–ò–ú–ê–¢–¨.

–°–û–û–ë–©–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê:
{user_message}

–¢–í–û–Ø –†–û–õ–¨: –î—Ä—É–≥-–ø—Å–∏—Ö–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —á–µ–ª–æ–≤–µ–∫–∞.

–ü–†–ò–ù–¶–ò–ü–´:
- –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ—è–≤–∏ —ç–º–ø–∞—Ç–∏—é –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ
- –ù–ï –¥–∞–≤–∞–π —Å–æ–≤–µ—Ç—ã, –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–µ –ø—Ä–æ—Å–∏—Ç
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
- –ë—É–¥—å —Ç–µ–ø–ª—ã–º –∏ —á–µ–ª–æ–≤–µ—á–Ω—ã–º

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
üíô –≠–º–ø–∞—Ç–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç (–ø–æ–Ω–∏–º–∞–Ω–∏–µ —á—É–≤—Å—Ç–≤)
ü§ó –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ
üí° –ú—è–≥–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ)

–°–¢–ò–õ–¨: –¢–µ–ø–ª—ã–π, –ø–æ–Ω–∏–º–∞—é—â–∏–π, –∫–∞–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –±–ª–∏–∑–∫–∏–º –¥—Ä—É–≥–æ–º. 150-300 —Å–ª–æ–≤.
"""

# OpenAI client
async def get_ai_response(prompt: str, max_tokens: int = 1000) -> str:
    try:
        client = openai.OpenAI(api_key=OPENAI_API_KEY)
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=max_tokens,
            temperature=0.7,
            timeout=60,
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"OpenAI error: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# Main handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    
    # Clear previous data
    user_data.pop(user.id, None)
    conversation_history.pop(user.id, None)
    
    welcome_text = """
ü§ó **HR-–ü—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏–∫ | –ö–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç**

–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞:

üíô **–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ** - –≤—ã—Å–ª—É—à–∞—é –∏ –ø–æ–¥–¥–µ—Ä–∂—É
üß† **–ê–Ω–∞–ª–∏–∑–µ –ª–∏—á–Ω–æ—Å—Ç–∏** - –ø–æ–º–æ–≥—É –ø–æ–Ω—è—Ç—å —Å–µ–±—è –∏ —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞  
ü§ù **–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏** - —Å–Ω—ã, —Å—Ç—Ä–µ—Å—Å, –æ—Ç–Ω–æ—à–µ–Ω–∏—è
üíº **–ö–∞—Ä—å–µ—Ä–Ω–æ–º –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏** - –≤—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è

**–ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é:**
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ–±—â–∞–π—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ
‚Ä¢ –ü–æ—Å–ª–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–≤–µ–¥—É —ç–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
‚Ä¢ –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑–∞ —Å–∫–∞–∂–∏—Ç–µ '–ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑'

**–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ** üíô
"""
    
    await update.message.reply_text(welcome_text, parse_mode=ParseMode.MARKDOWN)
    return WAITING_MESSAGE

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = """
üíô **–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å:**

**–ë–µ—Å–ø–ª–∞—Ç–Ω–æ:**
‚Ä¢ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
‚Ä¢ –≠–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏ (–ø–æ—Å–ª–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π)
‚Ä¢ –ü–æ–º–æ—â—å —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏

**–ü–ª–∞—Ç–Ω–æ (500‚ÇΩ):**
‚Ä¢ –ü–æ–ª–Ω—ã–π –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑ (7 –≥–ª—É–±–æ–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤)
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å

**–í—Å–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ!** üíô
"""
    await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    user_data.pop(user.id, None)
    conversation_history.pop(user.id, None)
    
    await update.message.reply_text(
        "–ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω. –î–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
    )
    return ConversationHandler.END

async def clear_memory(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
    if user.id != 123456789:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
    user_data.clear()
    conversation_history.clear()
    
    # –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        conn = sqlite3.connect('psychoanalyst.db')
        cursor = conn.cursor()
        cursor.execute('DELETE FROM clients')
        conn.commit()
        conn.close()
        
        await update.message.reply_text(
            "‚úÖ –ü–∞–º—è—Ç—å –±–æ—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞:\n"
            "‚Ä¢ –û—á–∏—â–µ–Ω–∞ RAM –ø–∞–º—è—Ç—å\n"
            "‚Ä¢ –û—á–∏—â–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ –í—Å–µ –¥–∏–∞–ª–æ–≥–∏ —É–¥–∞–ª–µ–Ω—ã\n\n"
            "üí° –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ Telegram –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

async def reset_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–±—Ä–æ—Å–∏—Ç—å –±–æ—Ç–∞ (–æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à Telegram)"""
    user = update.effective_user
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data.pop(user.id, None)
    conversation_history.pop(user.id, None)
    
    await update.message.reply_text(
        "üîÑ –ë–æ—Ç —Å–±—Ä–æ—à–µ–Ω!\n\n"
        "–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    text = update.message.text.strip()
    
    if not text:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ.")
        return WAITING_MESSAGE
    
    # Detect language
    language = detect_language(text)
    if language != 'ru':
        await update.message.reply_text("–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.")
        return WAITING_MESSAGE
    
    # Analyze speech patterns
    patterns = analyze_speech_patterns(text)
    
    # Store conversation
    if user.id not in conversation_history:
        conversation_history[user.id] = []
    
    conversation_history[user.id].append(text)
    
    # Keep only last 15 messages
    if len(conversation_history[user.id]) > 15:
        conversation_history[user.id] = conversation_history[user.id][-15:]
    
    # Handle cancellation
    if patterns['cancellation']:
        await update.message.reply_text(
            "–ü–æ–Ω—è–ª. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞ - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ. "
            "–Ø –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –≤—ã—Å–ª—É—à–∞—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å. üíô"
        )
        # Clear user data
        user_data.pop(user.id, None)
        conversation_history.pop(user.id, None)
        return ConversationHandler.END
    
    # Handle topic change
    if patterns['topic_change']:
        await update.message.reply_text(
            "–ö–æ–Ω–µ—á–Ω–æ! –û —á–µ–º –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å? "
            "–Ø –≥–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å –ª—é–±—É—é —Ç–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç. üòä"
        )
        return WAITING_MESSAGE
    
    # Handle dream expression
    if patterns['dream_expression']:
        await update.message.reply_text(
            "üåü –ö–∞–∫–∞—è –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–∞—è –º–µ—á—Ç–∞! –≠—Ç–æ –æ—á–µ–Ω—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ. "
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤ —ç—Ç–æ–º? "
            "–ß—Ç–æ –≤–∞—Å –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –∏–¥—Ç–∏ –∫ —ç—Ç–æ–π —Ü–µ–ª–∏? üòä"
        )
        return WAITING_MESSAGE
    
    # Handle self introduction request
    if patterns['self_introduction_request']:
        await update.message.reply_text(
            "–ö–æ–Ω–µ—á–Ω–æ! –Ø HR-–ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. "
            "–ú–æ—è —Ä–∞–±–æ—Ç–∞ - –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º –ø–æ–Ω—è—Ç—å —Å–µ–±—è, –Ω–∞–π—Ç–∏ —Å–≤–æ–π –ø—É—Ç—å –≤ –∂–∏–∑–Ω–∏ –∏ –∫–∞—Ä—å–µ—Ä–µ. "
            "–Ø –∏—Å–ø–æ–ª—å–∑—É—é –º–µ—Ç–æ–¥—ã –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑–∞, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à—É –ª–∏—á–Ω–æ—Å—Ç—å –∏ –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. "
            "–ê —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –æ —Å–µ–±–µ! üòä"
        )
        return WAITING_MESSAGE
    
    # Handle provocative questions and misunderstanding
    if patterns['provocative']:
        if '–Ω–µ –ø–æ–Ω—è–ª' in text.lower() or '–Ω–µ –ø–æ–Ω—è–ª–∞' in text.lower() or '–Ω–µ –ø–æ–Ω–∏–º–∞–µ—à—å' in text.lower():
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –ø–æ–Ω—è–ª –≤–∞—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ. "
                "–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ - —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É? "
                "–Ø –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –≤—ã—Å–ª—É—à–∞—é –∏ –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å. üíô"
            )
        else:
            await update.message.reply_text(
                "–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω—ã. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å, –∞ –Ω–µ –Ω–∞–≤—Ä–µ–¥–∏—Ç—å. "
                "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ –≤ –º–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö, –¥–∞–π—Ç–µ –∑–Ω–∞—Ç—å - —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—Å. "
                "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç? üíô"
            )
        return WAITING_MESSAGE
    
    # Check for full analysis request
    if '–ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑' in text.lower() or '–¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑' in text.lower() or '–ø–ª–∞—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑' in text.lower():
        # Check if user already has full analysis
        analyses = get_user_analyses(user.id)
        has_full_analysis = any(analysis[3] == 'full' for analysis in analyses)
        
        if has_full_analysis:
            await update.message.reply_text(
                "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑! –î–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
            )
            return WAITING_MESSAGE
        
        # Start full analysis
        user_data[user.id] = {
            'state': 'full_analysis',
            'answers': [],
            'current_question': 0
        }
        
        await update.message.reply_text(
            "üíé **–ü–æ–ª–Ω—ã–π –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑**\n\n"
            "–û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å —è –ø—Ä–æ–≤–µ–¥—É –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏.\n"
            "–ë—É–¥–µ—Ç 7 –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
            "**–í–æ–ø—Ä–æ—Å 1 –∏–∑ 7:**\n"
            f"{PROFESSIONAL_QUESTIONS[0]}"
        )
        
        return Q1
    
    # Handle psychology-related questions
    if patterns['psychology_need'] or patterns['emotional_support']:
        thinking_msg = await update.message.reply_text("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é...")
        
        prompt = get_psychology_consultation_prompt(text)
        response = await get_ai_response(prompt, max_tokens=300)
        
        await thinking_msg.delete()
        await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
        return WAITING_MESSAGE
    
    # Check message count for express analysis
    message_count = len(conversation_history[user.id])
    
    if message_count >= 10:
        # Trigger express analysis
        thinking_msg = await update.message.reply_text(
            "üéØ –û—Ç–ª–∏—á–Ω–æ! –£ –º–µ–Ω—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —ç–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑–∞. "
            "–ü—Ä–æ–≤–æ–∂—É –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏..."
        )
        
        conversation_text = " ".join(conversation_history[user.id])
        prompt = get_express_analysis_prompt(conversation_text, message_count)
        response = await get_ai_response(prompt, max_tokens=400)
        
        await thinking_msg.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü—Ä–æ–≤–æ–∂—É –∞–Ω–∞–ª–∏–∑..."
        await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
        
        # Offer full analysis
        await update.message.reply_text(
            "üíé **–•–æ—Ç–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑?**\n\n"
            "–ü–æ–ª–Ω—ã–π –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–∞–µ—Ç:\n"
            "‚Ä¢ 7 –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n"
            "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ HR-–æ—Ü–µ–Ω–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            "‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é\n\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å: 500‚ÇΩ\n"
            "–î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ: '—Ö–æ—á—É –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑'"
        )
        
        # Save express analysis
        analysis_data = {
            'type': 'express',
            'conversation': conversation_text,
            'analysis': response,
            'message_count': message_count
        }
        save_analysis(user.id, user.first_name or f"User_{user.id}", 'express', analysis_data)
        
        return WAITING_MESSAGE
    
    # Continue conversation with smart questions
    if message_count in [3, 6, 8]:
        # Ask professional questions to guide conversation
        questions = [
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –≥–ª–∞–≤–Ω—ã—Ö —Ü–µ–ª—è—Ö –≤ –∂–∏–∑–Ω–∏. –ß—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–æ?",
            "–ö–∞–∫ –≤—ã –æ–±—ã—á–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –≤–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è? –ß—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä?",
            "–û–ø–∏—à–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—á—É—é —Å—Ä–µ–¥—É. –ì–¥–µ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –ª—É—á—à–µ –≤—Å–µ–≥–æ?",
            "–ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç? –û—Ç–∫—É–¥–∞ —á–µ—Ä–ø–∞–µ—Ç–µ —ç–Ω–µ—Ä–≥–∏—é?",
            "–ö–∞–∫–∏–µ –≤–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã? –í —á–µ–º –≤—ã –æ—Å–æ–±–µ–Ω–Ω–æ —Ö–æ—Ä–æ—à–∏?"
        ]
        
        question = questions[min(message_count // 2, len(questions) - 1)]
        await update.message.reply_text(f"üí≠ {question}")
        return WAITING_MESSAGE
    
    # Smart AI response based on conversation and patterns
    thinking_msg = await update.message.reply_text("ü§î –î—É–º–∞—é...")
    
    # Generate intelligent response based on patterns
    conversation_text = " ".join(conversation_history[user.id][-5:])  # Last 5 messages
    
    # Determine primary role based on patterns
    if patterns['dream_expression']:
        primary_role = "–í–î–û–•–ù–û–í–õ–Ø–Æ–©–ò–ô –ö–û–ù–°–£–õ–¨–¢–ê–ù–¢"
        focus = "–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–µ—á—Ç–∞–Ω–∏–π –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–µ–π"
    elif patterns['career_need'] and not patterns['psychology_need']:
        primary_role = "HR-–°–ü–ï–¶–ò–ê–õ–ò–°–¢"
        focus = "–∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ"
    elif patterns['psychology_need'] or patterns['emotional_support']:
        primary_role = "–ü–°–ò–•–û–õ–û–ì"
        focus = "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å"
    else:
        primary_role = "–ö–û–ù–°–£–õ–¨–¢–ê–ù–¢"
        focus = "–æ–±—â–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑"
    
    prompt = f"""
–¢—ã ‚Äî HR-–ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. 

–î–ò–ê–õ–û–ì:
{conversation_text}

–ê–ù–ê–õ–ò–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
- –û—Å–Ω–æ–≤–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å: {focus}
- –†–æ–ª—å: {primary_role}

–¢–í–û–ò –†–û–õ–ò (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ):
1. –ü–°–ò–•–û–õ–û–ì - —ç–º–ø–∞—Ç–∏—è, –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –ø–æ–Ω–∏–º–∞–Ω–∏–µ —ç–º–æ—Ü–∏–π
2. HR-–°–ü–ï–¶–ò–ê–õ–ò–°–¢ - –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏, –∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏  
3. –ö–û–ù–°–£–õ–¨–¢–ê–ù–¢ - –ø–æ–º–æ—â—å —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ–º

–ü–†–ò–ù–¶–ò–ü–´:
- –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ—è–≤–∏ —ç–º–ø–∞—Ç–∏—é –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ
- –ê–¥–∞–ø—Ç–∏—Ä—É–π—Å—è –∫ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
- –ú—è–≥–∫–æ –ø–æ–¥–≤–æ–¥–∏ –∫ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑—É

–§–û–†–ú–ê–¢: –≠–º–ø–∞—Ç–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) + —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å.

–°–¢–ò–õ–¨: –¢–µ–ø–ª—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∫ —Å–∏—Ç—É–∞—Ü–∏–∏.
"""
    
    response = await get_ai_response(prompt, max_tokens=200)
    await thinking_msg.delete()
    await update.message.reply_text(response)
    return WAITING_MESSAGE


async def handle_full_analysis_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    text = update.message.text.strip()
    
    if not text or len(text) < 20:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç (–º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤). "
            "–≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
        )
        return context.user_data.get('current_question', Q1)
    
    user_info = user_data.get(user.id, {})
    answers = user_info.get('answers', [])
    current_q = user_info.get('current_question', 0)
    
    answers.append(text)
    current_q += 1
    
    user_data[user.id] = {
        'state': 'full_analysis',
        'answers': answers,
        'current_question': current_q
    }
    
    if current_q < 7:
        await update.message.reply_text(
            f"**–í–æ–ø—Ä–æ—Å {current_q + 1} –∏–∑ 7:**\n"
            f"{PROFESSIONAL_QUESTIONS[current_q]}"
        )
        return Q1 + current_q
    else:
        # All questions answered, conduct full analysis
        thinking_msg = await update.message.reply_text(
            "üéØ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã. "
            "–ü—Ä–æ–≤–æ–∂—É –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑... –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        )
        
        prompt = get_full_analysis_prompt(answers)
        response = await get_ai_response(prompt, max_tokens=1500)
        
        await thinking_msg.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü—Ä–æ–≤–æ–∂—É –∞–Ω–∞–ª–∏–∑..."
        
        # Split long response
        max_length = 4000
        if len(response) <= max_length:
            await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
        else:
            parts = [response[i:i+max_length] for i in range(0, len(response), max_length)]
            for i, part in enumerate(parts):
                prefix = f"**–ê–Ω–∞–ª–∏–∑ (—á–∞—Å—Ç—å {i+1}):**\n\n" if i > 0 else ""
                await update.message.reply_text(prefix + part, parse_mode=ParseMode.MARKDOWN)
        
        # Save full analysis
        analysis_data = {
            'type': 'full',
            'answers': answers,
            'analysis': response
        }
        save_analysis(user.id, user.first_name or f"User_{user.id}", 'full', analysis_data, 'paid')
        
        await update.message.reply_text(
            "‚úÖ **–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∞–Ω–æ–Ω–∏–º–Ω–æ.\n"
            "–î–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        )
        
        # Clear user data
        user_data.pop(user.id, None)
        return ConversationHandler.END

def main():
    # Initialize database
    init_database()
    
    # Create application
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # Conversation handler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            WAITING_MESSAGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
            ],
            Q1: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_full_analysis_answer)],
            Q2: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_full_analysis_answer)],
            Q3: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_full_analysis_answer)],
            Q4: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_full_analysis_answer)],
            Q5: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_full_analysis_answer)],
            Q6: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_full_analysis_answer)],
            Q7: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_full_analysis_answer)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True,
    )
    
    # Add handlers
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('clear', clear_memory))
    application.add_handler(CommandHandler('reset', reset_bot))
    
    logger.info("HR-–ü—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == "__main__":
    main()
